// Code generated by MockGen. DO NOT EDIT.
// Source: ../service/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=../service/interfaces.go -destination=service_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	auth "developer-portal-backend/internal/auth"
	models "developer-portal-backend/internal/database/models"
	service "developer-portal-backend/internal/service"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockOrganizationServiceInterface is a mock of OrganizationServiceInterface interface.
type MockOrganizationServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockOrganizationServiceInterfaceMockRecorder is the mock recorder for MockOrganizationServiceInterface.
type MockOrganizationServiceInterfaceMockRecorder struct {
	mock *MockOrganizationServiceInterface
}

// NewMockOrganizationServiceInterface creates a new mock instance.
func NewMockOrganizationServiceInterface(ctrl *gomock.Controller) *MockOrganizationServiceInterface {
	mock := &MockOrganizationServiceInterface{ctrl: ctrl}
	mock.recorder = &MockOrganizationServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationServiceInterface) EXPECT() *MockOrganizationServiceInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrganizationServiceInterface) Create(req *service.CreateOrganizationRequest) (*service.OrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", req)
	ret0, _ := ret[0].(*service.OrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOrganizationServiceInterfaceMockRecorder) Create(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrganizationServiceInterface)(nil).Create), req)
}

// Delete mocks base method.
func (m *MockOrganizationServiceInterface) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOrganizationServiceInterfaceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrganizationServiceInterface)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockOrganizationServiceInterface) GetAll(page, pageSize int) (*service.OrganizationListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", page, pageSize)
	ret0, _ := ret[0].(*service.OrganizationListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockOrganizationServiceInterfaceMockRecorder) GetAll(page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockOrganizationServiceInterface)(nil).GetAll), page, pageSize)
}

// GetByDomain mocks base method.
func (m *MockOrganizationServiceInterface) GetByDomain(domain string) (*service.OrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDomain", domain)
	ret0, _ := ret[0].(*service.OrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDomain indicates an expected call of GetByDomain.
func (mr *MockOrganizationServiceInterfaceMockRecorder) GetByDomain(domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDomain", reflect.TypeOf((*MockOrganizationServiceInterface)(nil).GetByDomain), domain)
}

// GetByID mocks base method.
func (m *MockOrganizationServiceInterface) GetByID(id uuid.UUID) (*service.OrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*service.OrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockOrganizationServiceInterfaceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockOrganizationServiceInterface)(nil).GetByID), id)
}

// GetByName mocks base method.
func (m *MockOrganizationServiceInterface) GetByName(name string) (*service.OrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", name)
	ret0, _ := ret[0].(*service.OrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockOrganizationServiceInterfaceMockRecorder) GetByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockOrganizationServiceInterface)(nil).GetByName), name)
}

// GetWithComponents mocks base method.
func (m *MockOrganizationServiceInterface) GetWithComponents(id uuid.UUID) (*models.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithComponents", id)
	ret0, _ := ret[0].(*models.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithComponents indicates an expected call of GetWithComponents.
func (mr *MockOrganizationServiceInterfaceMockRecorder) GetWithComponents(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithComponents", reflect.TypeOf((*MockOrganizationServiceInterface)(nil).GetWithComponents), id)
}

// GetWithGroups mocks base method.
func (m *MockOrganizationServiceInterface) GetWithGroups(id uuid.UUID) (*models.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithGroups", id)
	ret0, _ := ret[0].(*models.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithGroups indicates an expected call of GetWithGroups.
func (mr *MockOrganizationServiceInterfaceMockRecorder) GetWithGroups(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithGroups", reflect.TypeOf((*MockOrganizationServiceInterface)(nil).GetWithGroups), id)
}

// GetWithLandscapes mocks base method.
func (m *MockOrganizationServiceInterface) GetWithLandscapes(id uuid.UUID) (*models.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithLandscapes", id)
	ret0, _ := ret[0].(*models.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithLandscapes indicates an expected call of GetWithLandscapes.
func (mr *MockOrganizationServiceInterfaceMockRecorder) GetWithLandscapes(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithLandscapes", reflect.TypeOf((*MockOrganizationServiceInterface)(nil).GetWithLandscapes), id)
}

// GetWithMembers mocks base method.
func (m *MockOrganizationServiceInterface) GetWithMembers(id uuid.UUID) (*models.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithMembers", id)
	ret0, _ := ret[0].(*models.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithMembers indicates an expected call of GetWithMembers.
func (mr *MockOrganizationServiceInterfaceMockRecorder) GetWithMembers(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithMembers", reflect.TypeOf((*MockOrganizationServiceInterface)(nil).GetWithMembers), id)
}

// GetWithProjects mocks base method.
func (m *MockOrganizationServiceInterface) GetWithProjects(id uuid.UUID) (*models.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithProjects", id)
	ret0, _ := ret[0].(*models.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithProjects indicates an expected call of GetWithProjects.
func (mr *MockOrganizationServiceInterfaceMockRecorder) GetWithProjects(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithProjects", reflect.TypeOf((*MockOrganizationServiceInterface)(nil).GetWithProjects), id)
}

// Update mocks base method.
func (m *MockOrganizationServiceInterface) Update(id uuid.UUID, req *service.UpdateOrganizationRequest) (*service.OrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, req)
	ret0, _ := ret[0].(*service.OrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockOrganizationServiceInterfaceMockRecorder) Update(id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrganizationServiceInterface)(nil).Update), id, req)
}

// MockMemberServiceInterface is a mock of MemberServiceInterface interface.
type MockMemberServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMemberServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockMemberServiceInterfaceMockRecorder is the mock recorder for MockMemberServiceInterface.
type MockMemberServiceInterfaceMockRecorder struct {
	mock *MockMemberServiceInterface
}

// NewMockMemberServiceInterface creates a new mock instance.
func NewMockMemberServiceInterface(ctrl *gomock.Controller) *MockMemberServiceInterface {
	mock := &MockMemberServiceInterface{ctrl: ctrl}
	mock.recorder = &MockMemberServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemberServiceInterface) EXPECT() *MockMemberServiceInterfaceMockRecorder {
	return m.recorder
}

// AddQuickLink mocks base method.
func (m *MockMemberServiceInterface) AddQuickLink(id uuid.UUID, req *service.AddQuickLinkRequest) (*service.MemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuickLink", id, req)
	ret0, _ := ret[0].(*service.MemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddQuickLink indicates an expected call of AddQuickLink.
func (mr *MockMemberServiceInterfaceMockRecorder) AddQuickLink(id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuickLink", reflect.TypeOf((*MockMemberServiceInterface)(nil).AddQuickLink), id, req)
}

// CreateMember mocks base method.
func (m *MockMemberServiceInterface) CreateMember(req *service.CreateMemberRequest) (*service.MemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMember", req)
	ret0, _ := ret[0].(*service.MemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMember indicates an expected call of CreateMember.
func (mr *MockMemberServiceInterfaceMockRecorder) CreateMember(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMember", reflect.TypeOf((*MockMemberServiceInterface)(nil).CreateMember), req)
}

// DeleteMember mocks base method.
func (m *MockMemberServiceInterface) DeleteMember(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMember", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMember indicates an expected call of DeleteMember.
func (mr *MockMemberServiceInterfaceMockRecorder) DeleteMember(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockMemberServiceInterface)(nil).DeleteMember), id)
}

// GetActiveMembers mocks base method.
func (m *MockMemberServiceInterface) GetActiveMembers(organizationID uuid.UUID, limit, offset int) ([]service.MemberResponse, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveMembers", organizationID, limit, offset)
	ret0, _ := ret[0].([]service.MemberResponse)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetActiveMembers indicates an expected call of GetActiveMembers.
func (mr *MockMemberServiceInterfaceMockRecorder) GetActiveMembers(organizationID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveMembers", reflect.TypeOf((*MockMemberServiceInterface)(nil).GetActiveMembers), organizationID, limit, offset)
}

// GetMemberByID mocks base method.
func (m *MockMemberServiceInterface) GetMemberByID(id uuid.UUID) (*service.MemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberByID", id)
	ret0, _ := ret[0].(*service.MemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberByID indicates an expected call of GetMemberByID.
func (mr *MockMemberServiceInterfaceMockRecorder) GetMemberByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberByID", reflect.TypeOf((*MockMemberServiceInterface)(nil).GetMemberByID), id)
}

// GetMembersByOrganization mocks base method.
func (m *MockMemberServiceInterface) GetMembersByOrganization(organizationID uuid.UUID, limit, offset int) ([]service.MemberResponse, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembersByOrganization", organizationID, limit, offset)
	ret0, _ := ret[0].([]service.MemberResponse)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMembersByOrganization indicates an expected call of GetMembersByOrganization.
func (mr *MockMemberServiceInterfaceMockRecorder) GetMembersByOrganization(organizationID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembersByOrganization", reflect.TypeOf((*MockMemberServiceInterface)(nil).GetMembersByOrganization), organizationID, limit, offset)
}

// GetQuickLinks mocks base method.
func (m *MockMemberServiceInterface) GetQuickLinks(id uuid.UUID) (*service.QuickLinksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuickLinks", id)
	ret0, _ := ret[0].(*service.QuickLinksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuickLinks indicates an expected call of GetQuickLinks.
func (mr *MockMemberServiceInterfaceMockRecorder) GetQuickLinks(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuickLinks", reflect.TypeOf((*MockMemberServiceInterface)(nil).GetQuickLinks), id)
}

// RemoveQuickLink mocks base method.
func (m *MockMemberServiceInterface) RemoveQuickLink(id uuid.UUID, linkURL string) (*service.MemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveQuickLink", id, linkURL)
	ret0, _ := ret[0].(*service.MemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveQuickLink indicates an expected call of RemoveQuickLink.
func (mr *MockMemberServiceInterfaceMockRecorder) RemoveQuickLink(id, linkURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveQuickLink", reflect.TypeOf((*MockMemberServiceInterface)(nil).RemoveQuickLink), id, linkURL)
}

// SearchMembers mocks base method.
func (m *MockMemberServiceInterface) SearchMembers(organizationID uuid.UUID, query string, limit, offset int) ([]service.MemberResponse, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMembers", organizationID, query, limit, offset)
	ret0, _ := ret[0].([]service.MemberResponse)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchMembers indicates an expected call of SearchMembers.
func (mr *MockMemberServiceInterfaceMockRecorder) SearchMembers(organizationID, query, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMembers", reflect.TypeOf((*MockMemberServiceInterface)(nil).SearchMembers), organizationID, query, limit, offset)
}

// UpdateMember mocks base method.
func (m *MockMemberServiceInterface) UpdateMember(id uuid.UUID, req *service.UpdateMemberRequest) (*service.MemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMember", id, req)
	ret0, _ := ret[0].(*service.MemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMember indicates an expected call of UpdateMember.
func (mr *MockMemberServiceInterfaceMockRecorder) UpdateMember(id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMember", reflect.TypeOf((*MockMemberServiceInterface)(nil).UpdateMember), id, req)
}

// MockGroupServiceInterface is a mock of GroupServiceInterface interface.
type MockGroupServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGroupServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockGroupServiceInterfaceMockRecorder is the mock recorder for MockGroupServiceInterface.
type MockGroupServiceInterfaceMockRecorder struct {
	mock *MockGroupServiceInterface
}

// NewMockGroupServiceInterface creates a new mock instance.
func NewMockGroupServiceInterface(ctrl *gomock.Controller) *MockGroupServiceInterface {
	mock := &MockGroupServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGroupServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupServiceInterface) EXPECT() *MockGroupServiceInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGroupServiceInterface) Create(req *service.CreateGroupRequest) (*service.GroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", req)
	ret0, _ := ret[0].(*service.GroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGroupServiceInterfaceMockRecorder) Create(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGroupServiceInterface)(nil).Create), req)
}

// Delete mocks base method.
func (m *MockGroupServiceInterface) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGroupServiceInterfaceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGroupServiceInterface)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockGroupServiceInterface) GetAll(orgID uuid.UUID, page, pageSize int) (*service.GroupListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", orgID, page, pageSize)
	ret0, _ := ret[0].(*service.GroupListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockGroupServiceInterfaceMockRecorder) GetAll(orgID, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockGroupServiceInterface)(nil).GetAll), orgID, page, pageSize)
}

// GetByID mocks base method.
func (m *MockGroupServiceInterface) GetByID(id uuid.UUID) (*service.GroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*service.GroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockGroupServiceInterfaceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockGroupServiceInterface)(nil).GetByID), id)
}

// GetByName mocks base method.
func (m *MockGroupServiceInterface) GetByName(organizationID uuid.UUID, name string) (*service.GroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", organizationID, name)
	ret0, _ := ret[0].(*service.GroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockGroupServiceInterfaceMockRecorder) GetByName(organizationID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockGroupServiceInterface)(nil).GetByName), organizationID, name)
}

// GetByOrganization mocks base method.
func (m *MockGroupServiceInterface) GetByOrganization(organizationID uuid.UUID, page, pageSize int) (*service.GroupListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrganization", organizationID, page, pageSize)
	ret0, _ := ret[0].(*service.GroupListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOrganization indicates an expected call of GetByOrganization.
func (mr *MockGroupServiceInterfaceMockRecorder) GetByOrganization(organizationID, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrganization", reflect.TypeOf((*MockGroupServiceInterface)(nil).GetByOrganization), organizationID, page, pageSize)
}

// GetWithTeams mocks base method.
func (m *MockGroupServiceInterface) GetWithTeams(id uuid.UUID, page, pageSize int) (*service.GroupWithTeamsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithTeams", id, page, pageSize)
	ret0, _ := ret[0].(*service.GroupWithTeamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithTeams indicates an expected call of GetWithTeams.
func (mr *MockGroupServiceInterfaceMockRecorder) GetWithTeams(id, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithTeams", reflect.TypeOf((*MockGroupServiceInterface)(nil).GetWithTeams), id, page, pageSize)
}

// Search mocks base method.
func (m *MockGroupServiceInterface) Search(organizationID uuid.UUID, query string, page, pageSize int) (*service.GroupListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", organizationID, query, page, pageSize)
	ret0, _ := ret[0].(*service.GroupListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockGroupServiceInterfaceMockRecorder) Search(organizationID, query, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockGroupServiceInterface)(nil).Search), organizationID, query, page, pageSize)
}

// Update mocks base method.
func (m *MockGroupServiceInterface) Update(id uuid.UUID, req *service.UpdateGroupRequest) (*service.GroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, req)
	ret0, _ := ret[0].(*service.GroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockGroupServiceInterfaceMockRecorder) Update(id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGroupServiceInterface)(nil).Update), id, req)
}

// MockTeamServiceInterface is a mock of TeamServiceInterface interface.
type MockTeamServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTeamServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockTeamServiceInterfaceMockRecorder is the mock recorder for MockTeamServiceInterface.
type MockTeamServiceInterfaceMockRecorder struct {
	mock *MockTeamServiceInterface
}

// NewMockTeamServiceInterface creates a new mock instance.
func NewMockTeamServiceInterface(ctrl *gomock.Controller) *MockTeamServiceInterface {
	mock := &MockTeamServiceInterface{ctrl: ctrl}
	mock.recorder = &MockTeamServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamServiceInterface) EXPECT() *MockTeamServiceInterfaceMockRecorder {
	return m.recorder
}

// AddLink mocks base method.
func (m *MockTeamServiceInterface) AddLink(id uuid.UUID, req *service.AddLinkRequest) (*service.TeamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLink", id, req)
	ret0, _ := ret[0].(*service.TeamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLink indicates an expected call of AddLink.
func (mr *MockTeamServiceInterfaceMockRecorder) AddLink(id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLink", reflect.TypeOf((*MockTeamServiceInterface)(nil).AddLink), id, req)
}

// Create mocks base method.
func (m *MockTeamServiceInterface) Create(req *service.CreateTeamRequest) (*service.TeamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", req)
	ret0, _ := ret[0].(*service.TeamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTeamServiceInterfaceMockRecorder) Create(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTeamServiceInterface)(nil).Create), req)
}

// Delete mocks base method.
func (m *MockTeamServiceInterface) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTeamServiceInterfaceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTeamServiceInterface)(nil).Delete), id)
}

// GetAllTeams mocks base method.
func (m *MockTeamServiceInterface) GetAllTeams(organizationID *uuid.UUID, page, pageSize int) (*service.TeamListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTeams", organizationID, page, pageSize)
	ret0, _ := ret[0].(*service.TeamListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTeams indicates an expected call of GetAllTeams.
func (mr *MockTeamServiceInterfaceMockRecorder) GetAllTeams(organizationID, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTeams", reflect.TypeOf((*MockTeamServiceInterface)(nil).GetAllTeams), organizationID, page, pageSize)
}

// GetByID mocks base method.
func (m *MockTeamServiceInterface) GetByID(id uuid.UUID) (*service.TeamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*service.TeamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTeamServiceInterfaceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTeamServiceInterface)(nil).GetByID), id)
}

// GetByName mocks base method.
func (m *MockTeamServiceInterface) GetByName(organization uuid.UUID, name string) (*service.TeamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", organization, name)
	ret0, _ := ret[0].(*service.TeamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockTeamServiceInterfaceMockRecorder) GetByName(organization, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockTeamServiceInterface)(nil).GetByName), organization, name)
}

// GetByOrganization mocks base method.
func (m *MockTeamServiceInterface) GetByOrganization(organizationID uuid.UUID, page, pageSize int) (*service.TeamListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrganization", organizationID, page, pageSize)
	ret0, _ := ret[0].(*service.TeamListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOrganization indicates an expected call of GetByOrganization.
func (mr *MockTeamServiceInterfaceMockRecorder) GetByOrganization(organizationID, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrganization", reflect.TypeOf((*MockTeamServiceInterface)(nil).GetByOrganization), organizationID, page, pageSize)
}

// GetMembersOnly mocks base method.
func (m *MockTeamServiceInterface) GetMembersOnly(id uuid.UUID) ([]service.MemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembersOnly", id)
	ret0, _ := ret[0].([]service.MemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembersOnly indicates an expected call of GetMembersOnly.
func (mr *MockTeamServiceInterfaceMockRecorder) GetMembersOnly(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembersOnly", reflect.TypeOf((*MockTeamServiceInterface)(nil).GetMembersOnly), id)
}

// GetTeamComponentsByID mocks base method.
func (m *MockTeamServiceInterface) GetTeamComponentsByID(id uuid.UUID, page, pageSize int) ([]models.Component, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamComponentsByID", id, page, pageSize)
	ret0, _ := ret[0].([]models.Component)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTeamComponentsByID indicates an expected call of GetTeamComponentsByID.
func (mr *MockTeamServiceInterfaceMockRecorder) GetTeamComponentsByID(id, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamComponentsByID", reflect.TypeOf((*MockTeamServiceInterface)(nil).GetTeamComponentsByID), id, page, pageSize)
}

// GetTeamComponentsByName mocks base method.
func (m *MockTeamServiceInterface) GetTeamComponentsByName(organizationID uuid.UUID, teamName string, page, pageSize int) ([]models.Component, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamComponentsByName", organizationID, teamName, page, pageSize)
	ret0, _ := ret[0].([]models.Component)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTeamComponentsByName indicates an expected call of GetTeamComponentsByName.
func (mr *MockTeamServiceInterfaceMockRecorder) GetTeamComponentsByName(organizationID, teamName, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamComponentsByName", reflect.TypeOf((*MockTeamServiceInterface)(nil).GetTeamComponentsByName), organizationID, teamName, page, pageSize)
}

// GetTeamLead mocks base method.
func (m *MockTeamServiceInterface) GetTeamLead(id uuid.UUID) (*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamLead", id)
	ret0, _ := ret[0].(*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamLead indicates an expected call of GetTeamLead.
func (mr *MockTeamServiceInterfaceMockRecorder) GetTeamLead(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamLead", reflect.TypeOf((*MockTeamServiceInterface)(nil).GetTeamLead), id)
}

// GetTeamMembersByName mocks base method.
func (m *MockTeamServiceInterface) GetTeamMembersByName(organizationID uuid.UUID, teamName string, page, pageSize int) ([]models.Member, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamMembersByName", organizationID, teamName, page, pageSize)
	ret0, _ := ret[0].([]models.Member)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTeamMembersByName indicates an expected call of GetTeamMembersByName.
func (mr *MockTeamServiceInterfaceMockRecorder) GetTeamMembersByName(organizationID, teamName, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamMembersByName", reflect.TypeOf((*MockTeamServiceInterface)(nil).GetTeamMembersByName), organizationID, teamName, page, pageSize)
}

// GetWithComponentOwnerships mocks base method.
func (m *MockTeamServiceInterface) GetWithComponentOwnerships(id uuid.UUID) (*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithComponentOwnerships", id)
	ret0, _ := ret[0].(*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithComponentOwnerships indicates an expected call of GetWithComponentOwnerships.
func (mr *MockTeamServiceInterfaceMockRecorder) GetWithComponentOwnerships(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithComponentOwnerships", reflect.TypeOf((*MockTeamServiceInterface)(nil).GetWithComponentOwnerships), id)
}

// GetWithDutySchedules mocks base method.
func (m *MockTeamServiceInterface) GetWithDutySchedules(id uuid.UUID) (*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithDutySchedules", id)
	ret0, _ := ret[0].(*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithDutySchedules indicates an expected call of GetWithDutySchedules.
func (mr *MockTeamServiceInterfaceMockRecorder) GetWithDutySchedules(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithDutySchedules", reflect.TypeOf((*MockTeamServiceInterface)(nil).GetWithDutySchedules), id)
}

// GetWithMembers mocks base method.
func (m *MockTeamServiceInterface) GetWithMembers(id uuid.UUID) (*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithMembers", id)
	ret0, _ := ret[0].(*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithMembers indicates an expected call of GetWithMembers.
func (mr *MockTeamServiceInterfaceMockRecorder) GetWithMembers(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithMembers", reflect.TypeOf((*MockTeamServiceInterface)(nil).GetWithMembers), id)
}

// GetWithProjects mocks base method.
func (m *MockTeamServiceInterface) GetWithProjects(id uuid.UUID) (*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithProjects", id)
	ret0, _ := ret[0].(*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithProjects indicates an expected call of GetWithProjects.
func (mr *MockTeamServiceInterfaceMockRecorder) GetWithProjects(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithProjects", reflect.TypeOf((*MockTeamServiceInterface)(nil).GetWithProjects), id)
}

// RemoveLink mocks base method.
func (m *MockTeamServiceInterface) RemoveLink(id uuid.UUID, linkURL string) (*service.TeamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLink", id, linkURL)
	ret0, _ := ret[0].(*service.TeamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLink indicates an expected call of RemoveLink.
func (mr *MockTeamServiceInterfaceMockRecorder) RemoveLink(id, linkURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLink", reflect.TypeOf((*MockTeamServiceInterface)(nil).RemoveLink), id, linkURL)
}

// Search mocks base method.
func (m *MockTeamServiceInterface) Search(organizationID uuid.UUID, query string, page, pageSize int) (*service.TeamListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", organizationID, query, page, pageSize)
	ret0, _ := ret[0].(*service.TeamListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockTeamServiceInterfaceMockRecorder) Search(organizationID, query, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockTeamServiceInterface)(nil).Search), organizationID, query, page, pageSize)
}

// Update mocks base method.
func (m *MockTeamServiceInterface) Update(id uuid.UUID, req *service.UpdateTeamRequest) (*service.TeamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, req)
	ret0, _ := ret[0].(*service.TeamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTeamServiceInterfaceMockRecorder) Update(id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTeamServiceInterface)(nil).Update), id, req)
}

// UpdateLinks mocks base method.
func (m *MockTeamServiceInterface) UpdateLinks(id uuid.UUID, req *service.UpdateLinksRequest) (*service.TeamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLinks", id, req)
	ret0, _ := ret[0].(*service.TeamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLinks indicates an expected call of UpdateLinks.
func (mr *MockTeamServiceInterfaceMockRecorder) UpdateLinks(id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLinks", reflect.TypeOf((*MockTeamServiceInterface)(nil).UpdateLinks), id, req)
}

// MockProjectServiceInterface is a mock of ProjectServiceInterface interface.
type MockProjectServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProjectServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockProjectServiceInterfaceMockRecorder is the mock recorder for MockProjectServiceInterface.
type MockProjectServiceInterfaceMockRecorder struct {
	mock *MockProjectServiceInterface
}

// NewMockProjectServiceInterface creates a new mock instance.
func NewMockProjectServiceInterface(ctrl *gomock.Controller) *MockProjectServiceInterface {
	mock := &MockProjectServiceInterface{ctrl: ctrl}
	mock.recorder = &MockProjectServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectServiceInterface) EXPECT() *MockProjectServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateProject mocks base method.
func (m *MockProjectServiceInterface) CreateProject(req *service.CreateProjectRequest) (*service.ProjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", req)
	ret0, _ := ret[0].(*service.ProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockProjectServiceInterfaceMockRecorder) CreateProject(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectServiceInterface)(nil).CreateProject), req)
}

// DeleteProject mocks base method.
func (m *MockProjectServiceInterface) DeleteProject(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockProjectServiceInterfaceMockRecorder) DeleteProject(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockProjectServiceInterface)(nil).DeleteProject), id)
}

// GetProjectByID mocks base method.
func (m *MockProjectServiceInterface) GetProjectByID(id uuid.UUID) (*service.ProjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByID", id)
	ret0, _ := ret[0].(*service.ProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByID indicates an expected call of GetProjectByID.
func (mr *MockProjectServiceInterfaceMockRecorder) GetProjectByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByID", reflect.TypeOf((*MockProjectServiceInterface)(nil).GetProjectByID), id)
}

// GetProjectsByOrganization mocks base method.
func (m *MockProjectServiceInterface) GetProjectsByOrganization(organizationID uuid.UUID, limit, offset int) ([]service.ProjectResponse, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectsByOrganization", organizationID, limit, offset)
	ret0, _ := ret[0].([]service.ProjectResponse)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectsByOrganization indicates an expected call of GetProjectsByOrganization.
func (mr *MockProjectServiceInterfaceMockRecorder) GetProjectsByOrganization(organizationID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsByOrganization", reflect.TypeOf((*MockProjectServiceInterface)(nil).GetProjectsByOrganization), organizationID, limit, offset)
}

// UpdateProject mocks base method.
func (m *MockProjectServiceInterface) UpdateProject(id uuid.UUID, req *service.UpdateProjectRequest) (*service.ProjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", id, req)
	ret0, _ := ret[0].(*service.ProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockProjectServiceInterfaceMockRecorder) UpdateProject(id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockProjectServiceInterface)(nil).UpdateProject), id, req)
}

// MockComponentServiceInterface is a mock of ComponentServiceInterface interface.
type MockComponentServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockComponentServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockComponentServiceInterfaceMockRecorder is the mock recorder for MockComponentServiceInterface.
type MockComponentServiceInterfaceMockRecorder struct {
	mock *MockComponentServiceInterface
}

// NewMockComponentServiceInterface creates a new mock instance.
func NewMockComponentServiceInterface(ctrl *gomock.Controller) *MockComponentServiceInterface {
	mock := &MockComponentServiceInterface{ctrl: ctrl}
	mock.recorder = &MockComponentServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComponentServiceInterface) EXPECT() *MockComponentServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateComponent mocks base method.
func (m *MockComponentServiceInterface) CreateComponent(req *service.CreateComponentRequest) (*service.ComponentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComponent", req)
	ret0, _ := ret[0].(*service.ComponentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComponent indicates an expected call of CreateComponent.
func (mr *MockComponentServiceInterfaceMockRecorder) CreateComponent(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComponent", reflect.TypeOf((*MockComponentServiceInterface)(nil).CreateComponent), req)
}

// DeleteComponent mocks base method.
func (m *MockComponentServiceInterface) DeleteComponent(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComponent", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComponent indicates an expected call of DeleteComponent.
func (mr *MockComponentServiceInterfaceMockRecorder) DeleteComponent(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComponent", reflect.TypeOf((*MockComponentServiceInterface)(nil).DeleteComponent), id)
}

// GetComponentByID mocks base method.
func (m *MockComponentServiceInterface) GetComponentByID(id uuid.UUID) (*service.ComponentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentByID", id)
	ret0, _ := ret[0].(*service.ComponentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponentByID indicates an expected call of GetComponentByID.
func (mr *MockComponentServiceInterfaceMockRecorder) GetComponentByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentByID", reflect.TypeOf((*MockComponentServiceInterface)(nil).GetComponentByID), id)
}

// GetComponentsByProject mocks base method.
func (m *MockComponentServiceInterface) GetComponentsByProject(projectID uuid.UUID, limit, offset int) ([]service.ComponentResponse, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentsByProject", projectID, limit, offset)
	ret0, _ := ret[0].([]service.ComponentResponse)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetComponentsByProject indicates an expected call of GetComponentsByProject.
func (mr *MockComponentServiceInterfaceMockRecorder) GetComponentsByProject(projectID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentsByProject", reflect.TypeOf((*MockComponentServiceInterface)(nil).GetComponentsByProject), projectID, limit, offset)
}

// UpdateComponent mocks base method.
func (m *MockComponentServiceInterface) UpdateComponent(id uuid.UUID, req *service.UpdateComponentRequest) (*service.ComponentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComponent", id, req)
	ret0, _ := ret[0].(*service.ComponentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComponent indicates an expected call of UpdateComponent.
func (mr *MockComponentServiceInterfaceMockRecorder) UpdateComponent(id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComponent", reflect.TypeOf((*MockComponentServiceInterface)(nil).UpdateComponent), id, req)
}

// MockLandscapeServiceInterface is a mock of LandscapeServiceInterface interface.
type MockLandscapeServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLandscapeServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockLandscapeServiceInterfaceMockRecorder is the mock recorder for MockLandscapeServiceInterface.
type MockLandscapeServiceInterfaceMockRecorder struct {
	mock *MockLandscapeServiceInterface
}

// NewMockLandscapeServiceInterface creates a new mock instance.
func NewMockLandscapeServiceInterface(ctrl *gomock.Controller) *MockLandscapeServiceInterface {
	mock := &MockLandscapeServiceInterface{ctrl: ctrl}
	mock.recorder = &MockLandscapeServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLandscapeServiceInterface) EXPECT() *MockLandscapeServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateLandscape mocks base method.
func (m *MockLandscapeServiceInterface) CreateLandscape(req *service.CreateLandscapeRequest) (*service.LandscapeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLandscape", req)
	ret0, _ := ret[0].(*service.LandscapeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLandscape indicates an expected call of CreateLandscape.
func (mr *MockLandscapeServiceInterfaceMockRecorder) CreateLandscape(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLandscape", reflect.TypeOf((*MockLandscapeServiceInterface)(nil).CreateLandscape), req)
}

// DeleteLandscape mocks base method.
func (m *MockLandscapeServiceInterface) DeleteLandscape(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLandscape", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLandscape indicates an expected call of DeleteLandscape.
func (mr *MockLandscapeServiceInterfaceMockRecorder) DeleteLandscape(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLandscape", reflect.TypeOf((*MockLandscapeServiceInterface)(nil).DeleteLandscape), id)
}

// GetLandscapeByID mocks base method.
func (m *MockLandscapeServiceInterface) GetLandscapeByID(id uuid.UUID) (*service.LandscapeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLandscapeByID", id)
	ret0, _ := ret[0].(*service.LandscapeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLandscapeByID indicates an expected call of GetLandscapeByID.
func (mr *MockLandscapeServiceInterfaceMockRecorder) GetLandscapeByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLandscapeByID", reflect.TypeOf((*MockLandscapeServiceInterface)(nil).GetLandscapeByID), id)
}

// GetLandscapesByOrganization mocks base method.
func (m *MockLandscapeServiceInterface) GetLandscapesByOrganization(organizationID uuid.UUID, limit, offset int) ([]service.LandscapeResponse, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLandscapesByOrganization", organizationID, limit, offset)
	ret0, _ := ret[0].([]service.LandscapeResponse)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLandscapesByOrganization indicates an expected call of GetLandscapesByOrganization.
func (mr *MockLandscapeServiceInterfaceMockRecorder) GetLandscapesByOrganization(organizationID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLandscapesByOrganization", reflect.TypeOf((*MockLandscapeServiceInterface)(nil).GetLandscapesByOrganization), organizationID, limit, offset)
}

// UpdateLandscape mocks base method.
func (m *MockLandscapeServiceInterface) UpdateLandscape(id uuid.UUID, req *service.UpdateLandscapeRequest) (*service.LandscapeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLandscape", id, req)
	ret0, _ := ret[0].(*service.LandscapeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLandscape indicates an expected call of UpdateLandscape.
func (mr *MockLandscapeServiceInterfaceMockRecorder) UpdateLandscape(id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLandscape", reflect.TypeOf((*MockLandscapeServiceInterface)(nil).UpdateLandscape), id, req)
}

// MockComponentDeploymentServiceInterface is a mock of ComponentDeploymentServiceInterface interface.
type MockComponentDeploymentServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockComponentDeploymentServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockComponentDeploymentServiceInterfaceMockRecorder is the mock recorder for MockComponentDeploymentServiceInterface.
type MockComponentDeploymentServiceInterfaceMockRecorder struct {
	mock *MockComponentDeploymentServiceInterface
}

// NewMockComponentDeploymentServiceInterface creates a new mock instance.
func NewMockComponentDeploymentServiceInterface(ctrl *gomock.Controller) *MockComponentDeploymentServiceInterface {
	mock := &MockComponentDeploymentServiceInterface{ctrl: ctrl}
	mock.recorder = &MockComponentDeploymentServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComponentDeploymentServiceInterface) EXPECT() *MockComponentDeploymentServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateComponentDeployment mocks base method.
func (m *MockComponentDeploymentServiceInterface) CreateComponentDeployment(req *service.CreateComponentDeploymentRequest) (*service.ComponentDeploymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComponentDeployment", req)
	ret0, _ := ret[0].(*service.ComponentDeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComponentDeployment indicates an expected call of CreateComponentDeployment.
func (mr *MockComponentDeploymentServiceInterfaceMockRecorder) CreateComponentDeployment(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComponentDeployment", reflect.TypeOf((*MockComponentDeploymentServiceInterface)(nil).CreateComponentDeployment), req)
}

// DeleteComponentDeployment mocks base method.
func (m *MockComponentDeploymentServiceInterface) DeleteComponentDeployment(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComponentDeployment", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComponentDeployment indicates an expected call of DeleteComponentDeployment.
func (mr *MockComponentDeploymentServiceInterfaceMockRecorder) DeleteComponentDeployment(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComponentDeployment", reflect.TypeOf((*MockComponentDeploymentServiceInterface)(nil).DeleteComponentDeployment), id)
}

// GetComponentDeploymentByID mocks base method.
func (m *MockComponentDeploymentServiceInterface) GetComponentDeploymentByID(id uuid.UUID) (*service.ComponentDeploymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentDeploymentByID", id)
	ret0, _ := ret[0].(*service.ComponentDeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponentDeploymentByID indicates an expected call of GetComponentDeploymentByID.
func (mr *MockComponentDeploymentServiceInterfaceMockRecorder) GetComponentDeploymentByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentDeploymentByID", reflect.TypeOf((*MockComponentDeploymentServiceInterface)(nil).GetComponentDeploymentByID), id)
}

// GetComponentDeploymentsByComponent mocks base method.
func (m *MockComponentDeploymentServiceInterface) GetComponentDeploymentsByComponent(componentID uuid.UUID, limit, offset int) ([]service.ComponentDeploymentResponse, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentDeploymentsByComponent", componentID, limit, offset)
	ret0, _ := ret[0].([]service.ComponentDeploymentResponse)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetComponentDeploymentsByComponent indicates an expected call of GetComponentDeploymentsByComponent.
func (mr *MockComponentDeploymentServiceInterfaceMockRecorder) GetComponentDeploymentsByComponent(componentID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentDeploymentsByComponent", reflect.TypeOf((*MockComponentDeploymentServiceInterface)(nil).GetComponentDeploymentsByComponent), componentID, limit, offset)
}

// UpdateComponentDeployment mocks base method.
func (m *MockComponentDeploymentServiceInterface) UpdateComponentDeployment(id uuid.UUID, req *service.UpdateComponentDeploymentRequest) (*service.ComponentDeploymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComponentDeployment", id, req)
	ret0, _ := ret[0].(*service.ComponentDeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComponentDeployment indicates an expected call of UpdateComponentDeployment.
func (mr *MockComponentDeploymentServiceInterfaceMockRecorder) UpdateComponentDeployment(id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComponentDeployment", reflect.TypeOf((*MockComponentDeploymentServiceInterface)(nil).UpdateComponentDeployment), id, req)
}

// MockGitHubServiceInterface is a mock of GitHubServiceInterface interface.
type MockGitHubServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockGitHubServiceInterfaceMockRecorder is the mock recorder for MockGitHubServiceInterface.
type MockGitHubServiceInterfaceMockRecorder struct {
	mock *MockGitHubServiceInterface
}

// NewMockGitHubServiceInterface creates a new mock instance.
func NewMockGitHubServiceInterface(ctrl *gomock.Controller) *MockGitHubServiceInterface {
	mock := &MockGitHubServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGitHubServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubServiceInterface) EXPECT() *MockGitHubServiceInterfaceMockRecorder {
	return m.recorder
}

// GetUserOpenPullRequests mocks base method.
func (m *MockGitHubServiceInterface) GetUserOpenPullRequests(ctx context.Context, claims *auth.AuthClaims, state, sort, direction string, perPage, page int) (*service.PullRequestsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOpenPullRequests", ctx, claims, state, sort, direction, perPage, page)
	ret0, _ := ret[0].(*service.PullRequestsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOpenPullRequests indicates an expected call of GetUserOpenPullRequests.
func (mr *MockGitHubServiceInterfaceMockRecorder) GetUserOpenPullRequests(ctx, claims, state, sort, direction, perPage, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOpenPullRequests", reflect.TypeOf((*MockGitHubServiceInterface)(nil).GetUserOpenPullRequests), ctx, claims, state, sort, direction, perPage, page)
}

// MockAICoreServiceInterface is a mock of AICoreServiceInterface interface.
type MockAICoreServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAICoreServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockAICoreServiceInterfaceMockRecorder is the mock recorder for MockAICoreServiceInterface.
type MockAICoreServiceInterfaceMockRecorder struct {
	mock *MockAICoreServiceInterface
}

// NewMockAICoreServiceInterface creates a new mock instance.
func NewMockAICoreServiceInterface(ctrl *gomock.Controller) *MockAICoreServiceInterface {
	mock := &MockAICoreServiceInterface{ctrl: ctrl}
	mock.recorder = &MockAICoreServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAICoreServiceInterface) EXPECT() *MockAICoreServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateConfiguration mocks base method.
func (m *MockAICoreServiceInterface) CreateConfiguration(c *gin.Context, req *service.AICoreConfigurationRequest) (*service.AICoreConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfiguration", c, req)
	ret0, _ := ret[0].(*service.AICoreConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfiguration indicates an expected call of CreateConfiguration.
func (mr *MockAICoreServiceInterfaceMockRecorder) CreateConfiguration(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfiguration", reflect.TypeOf((*MockAICoreServiceInterface)(nil).CreateConfiguration), c, req)
}

// CreateDeployment mocks base method.
func (m *MockAICoreServiceInterface) CreateDeployment(c *gin.Context, req *service.AICoreDeploymentRequest) (*service.AICoreDeploymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeployment", c, req)
	ret0, _ := ret[0].(*service.AICoreDeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeployment indicates an expected call of CreateDeployment.
func (mr *MockAICoreServiceInterfaceMockRecorder) CreateDeployment(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeployment", reflect.TypeOf((*MockAICoreServiceInterface)(nil).CreateDeployment), c, req)
}

// DeleteDeployment mocks base method.
func (m *MockAICoreServiceInterface) DeleteDeployment(c *gin.Context, deploymentID string) (*service.AICoreDeploymentDeletionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeployment", c, deploymentID)
	ret0, _ := ret[0].(*service.AICoreDeploymentDeletionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeployment indicates an expected call of DeleteDeployment.
func (mr *MockAICoreServiceInterfaceMockRecorder) DeleteDeployment(c, deploymentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployment", reflect.TypeOf((*MockAICoreServiceInterface)(nil).DeleteDeployment), c, deploymentID)
}

// GetDeployments mocks base method.
func (m *MockAICoreServiceInterface) GetDeployments(c *gin.Context) (*service.AICoreDeploymentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployments", c)
	ret0, _ := ret[0].(*service.AICoreDeploymentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployments indicates an expected call of GetDeployments.
func (mr *MockAICoreServiceInterfaceMockRecorder) GetDeployments(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployments", reflect.TypeOf((*MockAICoreServiceInterface)(nil).GetDeployments), c)
}

// GetDeploymentDetails mocks base method.
func (m *MockAICoreServiceInterface) GetDeploymentDetails(c *gin.Context, deploymentID string) (*service.AICoreDeploymentDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentDetails", c, deploymentID)
	ret0, _ := ret[0].(*service.AICoreDeploymentDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentDetails indicates an expected call of GetDeploymentDetails.
func (mr *MockAICoreServiceInterfaceMockRecorder) GetDeploymentDetails(c, deploymentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentDetails", reflect.TypeOf((*MockAICoreServiceInterface)(nil).GetDeploymentDetails), c, deploymentID)
}

// GetModels mocks base method.
func (m *MockAICoreServiceInterface) GetModels(c *gin.Context, scenarioID string) (*service.AICoreModelsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModels", c, scenarioID)
	ret0, _ := ret[0].(*service.AICoreModelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModels indicates an expected call of GetModels.
func (mr *MockAICoreServiceInterfaceMockRecorder) GetModels(c, scenarioID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModels", reflect.TypeOf((*MockAICoreServiceInterface)(nil).GetModels), c, scenarioID)
}

// UpdateDeployment mocks base method.
func (m *MockAICoreServiceInterface) UpdateDeployment(c *gin.Context, deploymentID string, req *service.AICoreDeploymentModificationRequest) (*service.AICoreDeploymentModificationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeployment", c, deploymentID, req)
	ret0, _ := ret[0].(*service.AICoreDeploymentModificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeployment indicates an expected call of UpdateDeployment.
func (mr *MockAICoreServiceInterfaceMockRecorder) UpdateDeployment(c, deploymentID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeployment", reflect.TypeOf((*MockAICoreServiceInterface)(nil).UpdateDeployment), c, deploymentID, req)
}
