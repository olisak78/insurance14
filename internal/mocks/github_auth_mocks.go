// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/github_auth_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	auth "developer-portal-backend/internal/auth"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGitHubAuthService is a mock of GitHubAuthService interface.
type MockGitHubAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubAuthServiceMockRecorder
}

// MockGitHubAuthServiceMockRecorder is the mock recorder for MockGitHubAuthService.
type MockGitHubAuthServiceMockRecorder struct {
	mock *MockGitHubAuthService
}

// NewMockGitHubAuthService creates a new mock instance.
func NewMockGitHubAuthService(ctrl *gomock.Controller) *MockGitHubAuthService {
	mock := &MockGitHubAuthService{ctrl: ctrl}
	mock.recorder = &MockGitHubAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubAuthService) EXPECT() *MockGitHubAuthServiceMockRecorder {
	return m.recorder
}

// GetGitHubAccessTokenFromClaims mocks base method.
func (m *MockGitHubAuthService) GetGitHubAccessTokenFromClaims(claims *auth.AuthClaims) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitHubAccessTokenFromClaims", claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitHubAccessTokenFromClaims indicates an expected call of GetGitHubAccessTokenFromClaims.
func (mr *MockGitHubAuthServiceMockRecorder) GetGitHubAccessTokenFromClaims(claims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitHubAccessTokenFromClaims", reflect.TypeOf((*MockGitHubAuthService)(nil).GetGitHubAccessTokenFromClaims), claims)
}

// GetGitHubClient mocks base method.
func (m *MockGitHubAuthService) GetGitHubClient(provider, environment string) (*auth.GitHubClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitHubClient", provider, environment)
	ret0, _ := ret[0].(*auth.GitHubClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitHubClient indicates an expected call of GetGitHubClient.
func (mr *MockGitHubAuthServiceMockRecorder) GetGitHubClient(provider, environment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitHubClient", reflect.TypeOf((*MockGitHubAuthService)(nil).GetGitHubClient), provider, environment)
}
