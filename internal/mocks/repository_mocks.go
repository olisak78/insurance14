// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/interfaces.go -destination=internal/mocks/repository_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "developer-portal-backend/internal/database/models"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockOrganizationRepositoryInterface is a mock of OrganizationRepositoryInterface interface.
type MockOrganizationRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockOrganizationRepositoryInterfaceMockRecorder is the mock recorder for MockOrganizationRepositoryInterface.
type MockOrganizationRepositoryInterfaceMockRecorder struct {
	mock *MockOrganizationRepositoryInterface
}

// NewMockOrganizationRepositoryInterface creates a new mock instance.
func NewMockOrganizationRepositoryInterface(ctrl *gomock.Controller) *MockOrganizationRepositoryInterface {
	mock := &MockOrganizationRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockOrganizationRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationRepositoryInterface) EXPECT() *MockOrganizationRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrganizationRepositoryInterface) Create(org *models.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", org)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) Create(org any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).Create), org)
}

// Delete mocks base method.
func (m *MockOrganizationRepositoryInterface) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockOrganizationRepositoryInterface) GetAll(limit, offset int) ([]models.Organization, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", limit, offset)
	ret0, _ := ret[0].([]models.Organization)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAll indicates an expected call of GetAll.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) GetAll(limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).GetAll), limit, offset)
}

// GetByDomain mocks base method.
func (m *MockOrganizationRepositoryInterface) GetByDomain(domain string) (*models.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDomain", domain)
	ret0, _ := ret[0].(*models.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDomain indicates an expected call of GetByDomain.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) GetByDomain(domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDomain", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).GetByDomain), domain)
}

// GetByID mocks base method.
func (m *MockOrganizationRepositoryInterface) GetByID(id uuid.UUID) (*models.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).GetByID), id)
}

// GetByName mocks base method.
func (m *MockOrganizationRepositoryInterface) GetByName(name string) (*models.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", name)
	ret0, _ := ret[0].(*models.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) GetByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).GetByName), name)
}

// GetWithAllRelations mocks base method.
func (m *MockOrganizationRepositoryInterface) GetWithAllRelations(id uuid.UUID) (*models.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithAllRelations", id)
	ret0, _ := ret[0].(*models.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithAllRelations indicates an expected call of GetWithAllRelations.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) GetWithAllRelations(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithAllRelations", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).GetWithAllRelations), id)
}

// GetWithComponents mocks base method.
func (m *MockOrganizationRepositoryInterface) GetWithComponents(id uuid.UUID) (*models.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithComponents", id)
	ret0, _ := ret[0].(*models.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithComponents indicates an expected call of GetWithComponents.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) GetWithComponents(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithComponents", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).GetWithComponents), id)
}

// GetWithGroups mocks base method.
func (m *MockOrganizationRepositoryInterface) GetWithGroups(id uuid.UUID) (*models.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithGroups", id)
	ret0, _ := ret[0].(*models.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithGroups indicates an expected call of GetWithGroups.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) GetWithGroups(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithGroups", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).GetWithGroups), id)
}

// GetWithLandscapes mocks base method.
func (m *MockOrganizationRepositoryInterface) GetWithLandscapes(id uuid.UUID) (*models.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithLandscapes", id)
	ret0, _ := ret[0].(*models.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithLandscapes indicates an expected call of GetWithLandscapes.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) GetWithLandscapes(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithLandscapes", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).GetWithLandscapes), id)
}

// GetWithMembers mocks base method.
func (m *MockOrganizationRepositoryInterface) GetWithMembers(id uuid.UUID) (*models.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithMembers", id)
	ret0, _ := ret[0].(*models.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithMembers indicates an expected call of GetWithMembers.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) GetWithMembers(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithMembers", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).GetWithMembers), id)
}

// GetWithProjects mocks base method.
func (m *MockOrganizationRepositoryInterface) GetWithProjects(id uuid.UUID) (*models.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithProjects", id)
	ret0, _ := ret[0].(*models.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithProjects indicates an expected call of GetWithProjects.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) GetWithProjects(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithProjects", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).GetWithProjects), id)
}

// Update mocks base method.
func (m *MockOrganizationRepositoryInterface) Update(org *models.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", org)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) Update(org any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).Update), org)
}

// MockMemberRepositoryInterface is a mock of MemberRepositoryInterface interface.
type MockMemberRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMemberRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockMemberRepositoryInterfaceMockRecorder is the mock recorder for MockMemberRepositoryInterface.
type MockMemberRepositoryInterfaceMockRecorder struct {
	mock *MockMemberRepositoryInterface
}

// NewMockMemberRepositoryInterface creates a new mock instance.
func NewMockMemberRepositoryInterface(ctrl *gomock.Controller) *MockMemberRepositoryInterface {
	mock := &MockMemberRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockMemberRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemberRepositoryInterface) EXPECT() *MockMemberRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMemberRepositoryInterface) Create(member *models.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", member)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMemberRepositoryInterfaceMockRecorder) Create(member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMemberRepositoryInterface)(nil).Create), member)
}

// Delete mocks base method.
func (m *MockMemberRepositoryInterface) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMemberRepositoryInterfaceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMemberRepositoryInterface)(nil).Delete), id)
}

// GetActiveByOrganization mocks base method.
func (m *MockMemberRepositoryInterface) GetActiveByOrganization(orgID uuid.UUID, limit, offset int) ([]models.Member, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveByOrganization", orgID, limit, offset)
	ret0, _ := ret[0].([]models.Member)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetActiveByOrganization indicates an expected call of GetActiveByOrganization.
func (mr *MockMemberRepositoryInterfaceMockRecorder) GetActiveByOrganization(orgID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveByOrganization", reflect.TypeOf((*MockMemberRepositoryInterface)(nil).GetActiveByOrganization), orgID, limit, offset)
}

// GetByEmail mocks base method.
func (m *MockMemberRepositoryInterface) GetByEmail(email string) (*models.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", email)
	ret0, _ := ret[0].(*models.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockMemberRepositoryInterfaceMockRecorder) GetByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockMemberRepositoryInterface)(nil).GetByEmail), email)
}

// GetByID mocks base method.
func (m *MockMemberRepositoryInterface) GetByID(id uuid.UUID) (*models.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMemberRepositoryInterfaceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMemberRepositoryInterface)(nil).GetByID), id)
}

// GetByOrganizationID mocks base method.
func (m *MockMemberRepositoryInterface) GetByOrganizationID(orgID uuid.UUID, limit, offset int) ([]models.Member, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrganizationID", orgID, limit, offset)
	ret0, _ := ret[0].([]models.Member)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByOrganizationID indicates an expected call of GetByOrganizationID.
func (mr *MockMemberRepositoryInterfaceMockRecorder) GetByOrganizationID(orgID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrganizationID", reflect.TypeOf((*MockMemberRepositoryInterface)(nil).GetByOrganizationID), orgID, limit, offset)
}

// GetWithOrganization mocks base method.
func (m *MockMemberRepositoryInterface) GetWithOrganization(id uuid.UUID) (*models.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithOrganization", id)
	ret0, _ := ret[0].(*models.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithOrganization indicates an expected call of GetWithOrganization.
func (mr *MockMemberRepositoryInterfaceMockRecorder) GetWithOrganization(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithOrganization", reflect.TypeOf((*MockMemberRepositoryInterface)(nil).GetWithOrganization), id)
}

// SearchByOrganization mocks base method.
func (m *MockMemberRepositoryInterface) SearchByOrganization(orgID uuid.UUID, query string, limit, offset int) ([]models.Member, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByOrganization", orgID, query, limit, offset)
	ret0, _ := ret[0].([]models.Member)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchByOrganization indicates an expected call of SearchByOrganization.
func (mr *MockMemberRepositoryInterfaceMockRecorder) SearchByOrganization(orgID, query, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByOrganization", reflect.TypeOf((*MockMemberRepositoryInterface)(nil).SearchByOrganization), orgID, query, limit, offset)
}

// Update mocks base method.
func (m *MockMemberRepositoryInterface) Update(member *models.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", member)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMemberRepositoryInterfaceMockRecorder) Update(member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMemberRepositoryInterface)(nil).Update), member)
}

// MockGroupRepositoryInterface is a mock of GroupRepositoryInterface interface.
type MockGroupRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGroupRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockGroupRepositoryInterfaceMockRecorder is the mock recorder for MockGroupRepositoryInterface.
type MockGroupRepositoryInterfaceMockRecorder struct {
	mock *MockGroupRepositoryInterface
}

// NewMockGroupRepositoryInterface creates a new mock instance.
func NewMockGroupRepositoryInterface(ctrl *gomock.Controller) *MockGroupRepositoryInterface {
	mock := &MockGroupRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockGroupRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupRepositoryInterface) EXPECT() *MockGroupRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGroupRepositoryInterface) Create(group *models.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", group)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockGroupRepositoryInterfaceMockRecorder) Create(group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGroupRepositoryInterface)(nil).Create), group)
}

// Delete mocks base method.
func (m *MockGroupRepositoryInterface) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGroupRepositoryInterfaceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGroupRepositoryInterface)(nil).Delete), id)
}

// GetByID mocks base method.
func (m *MockGroupRepositoryInterface) GetByID(id uuid.UUID) (*models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockGroupRepositoryInterfaceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockGroupRepositoryInterface)(nil).GetByID), id)
}

// GetByName mocks base method.
func (m *MockGroupRepositoryInterface) GetByName(orgID uuid.UUID, name string) (*models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", orgID, name)
	ret0, _ := ret[0].(*models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockGroupRepositoryInterfaceMockRecorder) GetByName(orgID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockGroupRepositoryInterface)(nil).GetByName), orgID, name)
}

// GetByOrganizationID mocks base method.
func (m *MockGroupRepositoryInterface) GetByOrganizationID(orgID uuid.UUID, limit, offset int) ([]models.Group, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrganizationID", orgID, limit, offset)
	ret0, _ := ret[0].([]models.Group)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByOrganizationID indicates an expected call of GetByOrganizationID.
func (mr *MockGroupRepositoryInterfaceMockRecorder) GetByOrganizationID(orgID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrganizationID", reflect.TypeOf((*MockGroupRepositoryInterface)(nil).GetByOrganizationID), orgID, limit, offset)
}

// GetWithOrganization mocks base method.
func (m *MockGroupRepositoryInterface) GetWithOrganization(id uuid.UUID) (*models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithOrganization", id)
	ret0, _ := ret[0].(*models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithOrganization indicates an expected call of GetWithOrganization.
func (mr *MockGroupRepositoryInterfaceMockRecorder) GetWithOrganization(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithOrganization", reflect.TypeOf((*MockGroupRepositoryInterface)(nil).GetWithOrganization), id)
}

// GetWithTeams mocks base method.
func (m *MockGroupRepositoryInterface) GetWithTeams(id uuid.UUID) (*models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithTeams", id)
	ret0, _ := ret[0].(*models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithTeams indicates an expected call of GetWithTeams.
func (mr *MockGroupRepositoryInterfaceMockRecorder) GetWithTeams(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithTeams", reflect.TypeOf((*MockGroupRepositoryInterface)(nil).GetWithTeams), id)
}

// Search mocks base method.
func (m *MockGroupRepositoryInterface) Search(organizationID uuid.UUID, query string, limit, offset int) ([]models.Group, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", organizationID, query, limit, offset)
	ret0, _ := ret[0].([]models.Group)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Search indicates an expected call of Search.
func (mr *MockGroupRepositoryInterfaceMockRecorder) Search(organizationID, query, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockGroupRepositoryInterface)(nil).Search), organizationID, query, limit, offset)
}

// Update mocks base method.
func (m *MockGroupRepositoryInterface) Update(id uuid.UUID, updates map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockGroupRepositoryInterfaceMockRecorder) Update(id, updates any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGroupRepositoryInterface)(nil).Update), id, updates)
}

// MockTeamRepositoryInterface is a mock of TeamRepositoryInterface interface.
type MockTeamRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTeamRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockTeamRepositoryInterfaceMockRecorder is the mock recorder for MockTeamRepositoryInterface.
type MockTeamRepositoryInterfaceMockRecorder struct {
	mock *MockTeamRepositoryInterface
}

// NewMockTeamRepositoryInterface creates a new mock instance.
func NewMockTeamRepositoryInterface(ctrl *gomock.Controller) *MockTeamRepositoryInterface {
	mock := &MockTeamRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockTeamRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamRepositoryInterface) EXPECT() *MockTeamRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTeamRepositoryInterface) Create(team *models.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", team)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTeamRepositoryInterfaceMockRecorder) Create(team any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTeamRepositoryInterface)(nil).Create), team)
}

// Delete mocks base method.
func (m *MockTeamRepositoryInterface) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTeamRepositoryInterfaceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTeamRepositoryInterface)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockTeamRepositoryInterface) GetAll() ([]models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTeamRepositoryInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTeamRepositoryInterface)(nil).GetAll))
}

// GetByID mocks base method.
func (m *MockTeamRepositoryInterface) GetByID(id uuid.UUID) (*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTeamRepositoryInterfaceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTeamRepositoryInterface)(nil).GetByID), id)
}

// GetByName mocks base method.
func (m *MockTeamRepositoryInterface) GetByName(groupID uuid.UUID, name string) (*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", groupID, name)
	ret0, _ := ret[0].(*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockTeamRepositoryInterfaceMockRecorder) GetByName(groupID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockTeamRepositoryInterface)(nil).GetByName), groupID, name)
}

// GetByOrganizationID mocks base method.
func (m *MockTeamRepositoryInterface) GetByOrganizationID(orgID uuid.UUID, limit, offset int) ([]models.Team, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrganizationID", orgID, limit, offset)
	ret0, _ := ret[0].([]models.Team)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByOrganizationID indicates an expected call of GetByOrganizationID.
func (mr *MockTeamRepositoryInterfaceMockRecorder) GetByOrganizationID(orgID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrganizationID", reflect.TypeOf((*MockTeamRepositoryInterface)(nil).GetByOrganizationID), orgID, limit, offset)
}

// GetWithMembers mocks base method.
func (m *MockTeamRepositoryInterface) GetWithMembers(id uuid.UUID) (*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithMembers", id)
	ret0, _ := ret[0].(*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithMembers indicates an expected call of GetWithMembers.
func (mr *MockTeamRepositoryInterfaceMockRecorder) GetWithMembers(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithMembers", reflect.TypeOf((*MockTeamRepositoryInterface)(nil).GetWithMembers), id)
}

// Update mocks base method.
func (m *MockTeamRepositoryInterface) Update(team *models.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", team)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTeamRepositoryInterfaceMockRecorder) Update(team any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTeamRepositoryInterface)(nil).Update), team)
}

// MockProjectRepositoryInterface is a mock of ProjectRepositoryInterface interface.
type MockProjectRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockProjectRepositoryInterfaceMockRecorder is the mock recorder for MockProjectRepositoryInterface.
type MockProjectRepositoryInterfaceMockRecorder struct {
	mock *MockProjectRepositoryInterface
}

// NewMockProjectRepositoryInterface creates a new mock instance.
func NewMockProjectRepositoryInterface(ctrl *gomock.Controller) *MockProjectRepositoryInterface {
	mock := &MockProjectRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockProjectRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepositoryInterface) EXPECT() *MockProjectRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProjectRepositoryInterface) Create(project *models.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", project)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockProjectRepositoryInterfaceMockRecorder) Create(project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProjectRepositoryInterface)(nil).Create), project)
}

// Delete mocks base method.
func (m *MockProjectRepositoryInterface) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProjectRepositoryInterfaceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProjectRepositoryInterface)(nil).Delete), id)
}

// GetActiveProjects mocks base method.
func (m *MockProjectRepositoryInterface) GetActiveProjects(limit, offset int) ([]models.Project, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveProjects", limit, offset)
	ret0, _ := ret[0].([]models.Project)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetActiveProjects indicates an expected call of GetActiveProjects.
func (mr *MockProjectRepositoryInterfaceMockRecorder) GetActiveProjects(limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveProjects", reflect.TypeOf((*MockProjectRepositoryInterface)(nil).GetActiveProjects), limit, offset)
}

// GetByID mocks base method.
func (m *MockProjectRepositoryInterface) GetByID(id uuid.UUID) (*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockProjectRepositoryInterfaceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockProjectRepositoryInterface)(nil).GetByID), id)
}

// GetByName mocks base method.
func (m *MockProjectRepositoryInterface) GetByName(name string, orgID uuid.UUID) (*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", name, orgID)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockProjectRepositoryInterfaceMockRecorder) GetByName(name, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockProjectRepositoryInterface)(nil).GetByName), name, orgID)
}

// GetByOrganizationID mocks base method.
func (m *MockProjectRepositoryInterface) GetByOrganizationID(orgID uuid.UUID, limit, offset int) ([]models.Project, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrganizationID", orgID, limit, offset)
	ret0, _ := ret[0].([]models.Project)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByOrganizationID indicates an expected call of GetByOrganizationID.
func (mr *MockProjectRepositoryInterfaceMockRecorder) GetByOrganizationID(orgID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrganizationID", reflect.TypeOf((*MockProjectRepositoryInterface)(nil).GetByOrganizationID), orgID, limit, offset)
}

// GetByStatus mocks base method.
func (m *MockProjectRepositoryInterface) GetByStatus(status models.ProjectStatus, limit, offset int) ([]models.Project, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStatus", status, limit, offset)
	ret0, _ := ret[0].([]models.Project)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByStatus indicates an expected call of GetByStatus.
func (mr *MockProjectRepositoryInterfaceMockRecorder) GetByStatus(status, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStatus", reflect.TypeOf((*MockProjectRepositoryInterface)(nil).GetByStatus), status, limit, offset)
}

// Update mocks base method.
func (m *MockProjectRepositoryInterface) Update(project *models.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", project)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockProjectRepositoryInterfaceMockRecorder) Update(project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProjectRepositoryInterface)(nil).Update), project)
}

// MockComponentRepositoryInterface is a mock of ComponentRepositoryInterface interface.
type MockComponentRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockComponentRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockComponentRepositoryInterfaceMockRecorder is the mock recorder for MockComponentRepositoryInterface.
type MockComponentRepositoryInterfaceMockRecorder struct {
	mock *MockComponentRepositoryInterface
}

// NewMockComponentRepositoryInterface creates a new mock instance.
func NewMockComponentRepositoryInterface(ctrl *gomock.Controller) *MockComponentRepositoryInterface {
	mock := &MockComponentRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockComponentRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComponentRepositoryInterface) EXPECT() *MockComponentRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockComponentRepositoryInterface) Create(component *models.Component) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", component)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockComponentRepositoryInterfaceMockRecorder) Create(component any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockComponentRepositoryInterface)(nil).Create), component)
}

// Delete mocks base method.
func (m *MockComponentRepositoryInterface) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockComponentRepositoryInterfaceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockComponentRepositoryInterface)(nil).Delete), id)
}

// GetActiveComponents mocks base method.
func (m *MockComponentRepositoryInterface) GetActiveComponents(limit, offset int) ([]models.Component, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveComponents", limit, offset)
	ret0, _ := ret[0].([]models.Component)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetActiveComponents indicates an expected call of GetActiveComponents.
func (mr *MockComponentRepositoryInterfaceMockRecorder) GetActiveComponents(limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveComponents", reflect.TypeOf((*MockComponentRepositoryInterface)(nil).GetActiveComponents), limit, offset)
}

// GetByID mocks base method.
func (m *MockComponentRepositoryInterface) GetByID(id uuid.UUID) (*models.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockComponentRepositoryInterfaceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockComponentRepositoryInterface)(nil).GetByID), id)
}

// GetByName mocks base method.
func (m *MockComponentRepositoryInterface) GetByName(name string, orgID uuid.UUID) (*models.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", name, orgID)
	ret0, _ := ret[0].(*models.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockComponentRepositoryInterfaceMockRecorder) GetByName(name, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockComponentRepositoryInterface)(nil).GetByName), name, orgID)
}

// GetByOrganizationID mocks base method.
func (m *MockComponentRepositoryInterface) GetByOrganizationID(orgID uuid.UUID, limit, offset int) ([]models.Component, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrganizationID", orgID, limit, offset)
	ret0, _ := ret[0].([]models.Component)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByOrganizationID indicates an expected call of GetByOrganizationID.
func (mr *MockComponentRepositoryInterfaceMockRecorder) GetByOrganizationID(orgID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrganizationID", reflect.TypeOf((*MockComponentRepositoryInterface)(nil).GetByOrganizationID), orgID, limit, offset)
}

// GetByStatus mocks base method.
func (m *MockComponentRepositoryInterface) GetByStatus(status models.ComponentStatus, limit, offset int) ([]models.Component, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStatus", status, limit, offset)
	ret0, _ := ret[0].([]models.Component)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByStatus indicates an expected call of GetByStatus.
func (mr *MockComponentRepositoryInterfaceMockRecorder) GetByStatus(status, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStatus", reflect.TypeOf((*MockComponentRepositoryInterface)(nil).GetByStatus), status, limit, offset)
}

// GetByType mocks base method.
func (m *MockComponentRepositoryInterface) GetByType(componentType models.ComponentType, limit, offset int) ([]models.Component, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByType", componentType, limit, offset)
	ret0, _ := ret[0].([]models.Component)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByType indicates an expected call of GetByType.
func (mr *MockComponentRepositoryInterfaceMockRecorder) GetByType(componentType, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByType", reflect.TypeOf((*MockComponentRepositoryInterface)(nil).GetByType), componentType, limit, offset)
}

// Update mocks base method.
func (m *MockComponentRepositoryInterface) Update(component *models.Component) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", component)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockComponentRepositoryInterfaceMockRecorder) Update(component any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockComponentRepositoryInterface)(nil).Update), component)
}

// MockLandscapeRepositoryInterface is a mock of LandscapeRepositoryInterface interface.
type MockLandscapeRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLandscapeRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockLandscapeRepositoryInterfaceMockRecorder is the mock recorder for MockLandscapeRepositoryInterface.
type MockLandscapeRepositoryInterfaceMockRecorder struct {
	mock *MockLandscapeRepositoryInterface
}

// NewMockLandscapeRepositoryInterface creates a new mock instance.
func NewMockLandscapeRepositoryInterface(ctrl *gomock.Controller) *MockLandscapeRepositoryInterface {
	mock := &MockLandscapeRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockLandscapeRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLandscapeRepositoryInterface) EXPECT() *MockLandscapeRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLandscapeRepositoryInterface) Create(landscape *models.Landscape) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", landscape)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockLandscapeRepositoryInterfaceMockRecorder) Create(landscape any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLandscapeRepositoryInterface)(nil).Create), landscape)
}

// Delete mocks base method.
func (m *MockLandscapeRepositoryInterface) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLandscapeRepositoryInterfaceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLandscapeRepositoryInterface)(nil).Delete), id)
}

// GetActiveLandscapes mocks base method.
func (m *MockLandscapeRepositoryInterface) GetActiveLandscapes(limit, offset int) ([]models.Landscape, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveLandscapes", limit, offset)
	ret0, _ := ret[0].([]models.Landscape)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetActiveLandscapes indicates an expected call of GetActiveLandscapes.
func (mr *MockLandscapeRepositoryInterfaceMockRecorder) GetActiveLandscapes(limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveLandscapes", reflect.TypeOf((*MockLandscapeRepositoryInterface)(nil).GetActiveLandscapes), limit, offset)
}

// GetByID mocks base method.
func (m *MockLandscapeRepositoryInterface) GetByID(id uuid.UUID) (*models.Landscape, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.Landscape)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockLandscapeRepositoryInterfaceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockLandscapeRepositoryInterface)(nil).GetByID), id)
}

// GetByName mocks base method.
func (m *MockLandscapeRepositoryInterface) GetByName(name string, orgID uuid.UUID) (*models.Landscape, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", name, orgID)
	ret0, _ := ret[0].(*models.Landscape)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockLandscapeRepositoryInterfaceMockRecorder) GetByName(name, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockLandscapeRepositoryInterface)(nil).GetByName), name, orgID)
}

// GetByOrganizationID mocks base method.
func (m *MockLandscapeRepositoryInterface) GetByOrganizationID(orgID uuid.UUID, limit, offset int) ([]models.Landscape, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrganizationID", orgID, limit, offset)
	ret0, _ := ret[0].([]models.Landscape)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByOrganizationID indicates an expected call of GetByOrganizationID.
func (mr *MockLandscapeRepositoryInterfaceMockRecorder) GetByOrganizationID(orgID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrganizationID", reflect.TypeOf((*MockLandscapeRepositoryInterface)(nil).GetByOrganizationID), orgID, limit, offset)
}

// GetByStatus mocks base method.
func (m *MockLandscapeRepositoryInterface) GetByStatus(status models.LandscapeStatus, limit, offset int) ([]models.Landscape, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStatus", status, limit, offset)
	ret0, _ := ret[0].([]models.Landscape)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByStatus indicates an expected call of GetByStatus.
func (mr *MockLandscapeRepositoryInterfaceMockRecorder) GetByStatus(status, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStatus", reflect.TypeOf((*MockLandscapeRepositoryInterface)(nil).GetByStatus), status, limit, offset)
}

// Update mocks base method.
func (m *MockLandscapeRepositoryInterface) Update(landscape *models.Landscape) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", landscape)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockLandscapeRepositoryInterfaceMockRecorder) Update(landscape any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLandscapeRepositoryInterface)(nil).Update), landscape)
}

// MockComponentDeploymentRepositoryInterface is a mock of ComponentDeploymentRepositoryInterface interface.
type MockComponentDeploymentRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockComponentDeploymentRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockComponentDeploymentRepositoryInterfaceMockRecorder is the mock recorder for MockComponentDeploymentRepositoryInterface.
type MockComponentDeploymentRepositoryInterfaceMockRecorder struct {
	mock *MockComponentDeploymentRepositoryInterface
}

// NewMockComponentDeploymentRepositoryInterface creates a new mock instance.
func NewMockComponentDeploymentRepositoryInterface(ctrl *gomock.Controller) *MockComponentDeploymentRepositoryInterface {
	mock := &MockComponentDeploymentRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockComponentDeploymentRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComponentDeploymentRepositoryInterface) EXPECT() *MockComponentDeploymentRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockComponentDeploymentRepositoryInterface) Create(deployment *models.ComponentDeployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", deployment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockComponentDeploymentRepositoryInterfaceMockRecorder) Create(deployment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockComponentDeploymentRepositoryInterface)(nil).Create), deployment)
}

// Delete mocks base method.
func (m *MockComponentDeploymentRepositoryInterface) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockComponentDeploymentRepositoryInterfaceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockComponentDeploymentRepositoryInterface)(nil).Delete), id)
}

// GetByActiveStatus mocks base method.
func (m *MockComponentDeploymentRepositoryInterface) GetByActiveStatus(isActive bool, limit, offset int) ([]models.ComponentDeployment, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByActiveStatus", isActive, limit, offset)
	ret0, _ := ret[0].([]models.ComponentDeployment)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByActiveStatus indicates an expected call of GetByActiveStatus.
func (mr *MockComponentDeploymentRepositoryInterfaceMockRecorder) GetByActiveStatus(isActive, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByActiveStatus", reflect.TypeOf((*MockComponentDeploymentRepositoryInterface)(nil).GetByActiveStatus), isActive, limit, offset)
}

// GetByComponentAndLandscape mocks base method.
func (m *MockComponentDeploymentRepositoryInterface) GetByComponentAndLandscape(componentID, landscapeID uuid.UUID) (*models.ComponentDeployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByComponentAndLandscape", componentID, landscapeID)
	ret0, _ := ret[0].(*models.ComponentDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByComponentAndLandscape indicates an expected call of GetByComponentAndLandscape.
func (mr *MockComponentDeploymentRepositoryInterfaceMockRecorder) GetByComponentAndLandscape(componentID, landscapeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByComponentAndLandscape", reflect.TypeOf((*MockComponentDeploymentRepositoryInterface)(nil).GetByComponentAndLandscape), componentID, landscapeID)
}

// GetByComponentID mocks base method.
func (m *MockComponentDeploymentRepositoryInterface) GetByComponentID(componentID uuid.UUID, limit, offset int) ([]models.ComponentDeployment, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByComponentID", componentID, limit, offset)
	ret0, _ := ret[0].([]models.ComponentDeployment)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByComponentID indicates an expected call of GetByComponentID.
func (mr *MockComponentDeploymentRepositoryInterfaceMockRecorder) GetByComponentID(componentID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByComponentID", reflect.TypeOf((*MockComponentDeploymentRepositoryInterface)(nil).GetByComponentID), componentID, limit, offset)
}

// GetByID mocks base method.
func (m *MockComponentDeploymentRepositoryInterface) GetByID(id uuid.UUID) (*models.ComponentDeployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.ComponentDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockComponentDeploymentRepositoryInterfaceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockComponentDeploymentRepositoryInterface)(nil).GetByID), id)
}

// GetByLandscapeID mocks base method.
func (m *MockComponentDeploymentRepositoryInterface) GetByLandscapeID(landscapeID uuid.UUID, limit, offset int) ([]models.ComponentDeployment, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLandscapeID", landscapeID, limit, offset)
	ret0, _ := ret[0].([]models.ComponentDeployment)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByLandscapeID indicates an expected call of GetByLandscapeID.
func (mr *MockComponentDeploymentRepositoryInterfaceMockRecorder) GetByLandscapeID(landscapeID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLandscapeID", reflect.TypeOf((*MockComponentDeploymentRepositoryInterface)(nil).GetByLandscapeID), landscapeID, limit, offset)
}

// Update mocks base method.
func (m *MockComponentDeploymentRepositoryInterface) Update(deployment *models.ComponentDeployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", deployment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockComponentDeploymentRepositoryInterfaceMockRecorder) Update(deployment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockComponentDeploymentRepositoryInterface)(nil).Update), deployment)
}
