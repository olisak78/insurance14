// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.example.com/support",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/ai-core/configurations": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new configuration in AI Core for the authenticated user's team",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai-core"
                ],
                "summary": "Create AI Core configuration",
                "parameters": [
                    {
                        "description": "Configuration data",
                        "name": "configuration",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.AICoreConfigurationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created configuration",
                        "schema": {
                            "$ref": "#/definitions/service.AICoreConfigurationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "User not assigned to team or team credentials not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ai-core/deployments": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all deployments from AI Core for the authenticated user's team",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai-core"
                ],
                "summary": "Get AI Core deployments",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved deployments",
                        "schema": {
                            "$ref": "#/definitions/service.AICoreDeploymentsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "User not assigned to team or team credentials not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new deployment in AI Core using a configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai-core"
                ],
                "summary": "Create AI Core deployment",
                "parameters": [
                    {
                        "description": "Deployment data",
                        "name": "deployment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.AICoreDeploymentRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Successfully scheduled deployment",
                        "schema": {
                            "$ref": "#/definitions/service.AICoreDeploymentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "User not assigned to team or team credentials not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ai-core/deployments/{deploymentId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a specific deployment from AI Core",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai-core"
                ],
                "summary": "Get AI Core deployment details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Deployment ID",
                        "name": "deploymentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved deployment details",
                        "schema": {
                            "$ref": "#/definitions/service.AICoreDeploymentDetailsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "User not assigned to team or team credentials not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Deployment not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mark deployment as deleted in AI Core",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai-core"
                ],
                "summary": "Delete AI Core deployment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Deployment ID",
                        "name": "deploymentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Successfully scheduled deployment deletion",
                        "schema": {
                            "$ref": "#/definitions/service.AICoreDeploymentDeletionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "User not assigned to team or team credentials not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Deployment not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update target status or configuration of a deployment in AI Core",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai-core"
                ],
                "summary": "Update AI Core deployment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Deployment ID",
                        "name": "deploymentId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Deployment modification data",
                        "name": "modification",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.AICoreDeploymentModificationRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Successfully scheduled deployment modification",
                        "schema": {
                            "$ref": "#/definitions/service.AICoreDeploymentModificationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "User not assigned to team or team credentials not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Deployment not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ai-core/models": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all available models from AI Core for a specific scenario",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai-core"
                ],
                "summary": "Get AI Core models",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Scenario ID to get models for",
                        "name": "scenarioId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved models",
                        "schema": {
                            "$ref": "#/definitions/service.AICoreModelsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - missing scenarioId parameter",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "User not assigned to team or team credentials not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/auth/validate": {
            "post": {
                "description": "Validate JWT token and return token claims",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Validate JWT token",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"",
                        "description": "Bearer token to validate",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token is valid with claims",
                        "schema": {
                            "$ref": "#/definitions/auth.AuthValidateResponse"
                        }
                    },
                    "401": {
                        "description": "Authorization header required or token invalid",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/auth/{provider}/handler/frame": {
            "get": {
                "description": "Handle OAuth callback from provider and return authentication result in HTML frame",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Handle OAuth callback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth provider (githubtools or githubwdf)",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "OAuth authorization code from provider",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "OAuth state parameter for security",
                        "name": "state",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Environment (development, staging, production)",
                        "name": "env",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OAuth error parameter from provider",
                        "name": "error",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OAuth error description from provider",
                        "name": "error_description",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTML page that posts authentication result to opener window",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/auth/{provider}/logout": {
            "post": {
                "description": "Logout user and invalidate authentication session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Logout user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth provider (githubtools or githubwdf)",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Environment (development, staging, production)",
                        "name": "env",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "schema": {
                            "$ref": "#/definitions/auth.AuthLogoutResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid provider",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Logout failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/auth/{provider}/refresh": {
            "get": {
                "description": "Refresh or validate authentication token using refresh token, Authorization header, or session cookies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Refresh authentication token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth provider (githubtools or githubwdf)",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Environment (development, staging, production)",
                        "name": "env",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Refresh token to use for getting new access token",
                        "name": "refresh_token",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"",
                        "description": "Bearer token for validation",
                        "name": "Authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully refreshed token",
                        "schema": {
                            "$ref": "#/definitions/auth.AuthRefreshResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid provider",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required or token invalid",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Token refresh failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/auth/{provider}/start": {
            "get": {
                "description": "Initiate OAuth authentication flow with the specified provider",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Start OAuth authentication",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth provider (githubtools or githubwdf)",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Environment (development, staging, production)",
                        "name": "env",
                        "in": "query"
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirect to OAuth provider authorization URL",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid provider or request parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to generate authorization URL",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/component-deployments": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get component deployments filtered by component or landscape with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "component-deployments"
                ],
                "summary": "List component deployments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Component ID (UUID) to filter deployments",
                        "name": "component_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Landscape ID (UUID) to filter deployments",
                        "name": "landscape_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of items per page",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved component deployments",
                        "schema": {
                            "$ref": "#/definitions/service.ComponentDeploymentListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters - component_id or landscape_id required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deploy a component to a specific landscape",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "component-deployments"
                ],
                "summary": "Create a new component deployment",
                "parameters": [
                    {
                        "description": "Component deployment data",
                        "name": "deployment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateComponentDeploymentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created component deployment",
                        "schema": {
                            "$ref": "#/definitions/service.ComponentDeploymentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Component or landscape not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Component deployment already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/component-deployments/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific component deployment by its UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "component-deployments"
                ],
                "summary": "Get component deployment by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Component deployment ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved component deployment",
                        "schema": {
                            "$ref": "#/definitions/service.ComponentDeploymentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid component deployment ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Component deployment not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing component deployment by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "component-deployments"
                ],
                "summary": "Update component deployment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Component deployment ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated component deployment data",
                        "name": "deployment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UpdateComponentDeploymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated component deployment",
                        "schema": {
                            "$ref": "#/definitions/service.ComponentDeploymentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Component deployment not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a component deployment by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "component-deployments"
                ],
                "summary": "Delete component deployment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Component deployment ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted component deployment"
                    },
                    "400": {
                        "description": "Invalid component deployment ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Component deployment not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/component-deployments/{id}/details": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a component deployment with all its related data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "component-deployments"
                ],
                "summary": "Get component deployment with full details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Component deployment ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved component deployment with details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid component deployment ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Component deployment not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/components": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all components in an organization with optional search and pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "components"
                ],
                "summary": "List components",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID (UUID)",
                        "name": "organization_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Search term for component name or description",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of items per page",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved components",
                        "schema": {
                            "$ref": "#/definitions/service.ComponentListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new component within an organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "components"
                ],
                "summary": "Create a new component",
                "parameters": [
                    {
                        "description": "Component data",
                        "name": "component",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateComponentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created component",
                        "schema": {
                            "$ref": "#/definitions/service.ComponentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Component already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/components/by-name/{name}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a component by its name within a specific organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "components"
                ],
                "summary": "Get component by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Component name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Organization ID (UUID)",
                        "name": "organization_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved component",
                        "schema": {
                            "$ref": "#/definitions/service.ComponentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Component not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/components/by-team/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all components owned by a team identified by ID. This is a cleaner endpoint that uses team ID instead of name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "components"
                ],
                "summary": "Get components by team ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of items per page",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved components",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Team not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/components/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific component by its UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "components"
                ],
                "summary": "Get component by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Component ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved component",
                        "schema": {
                            "$ref": "#/definitions/service.ComponentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid component ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Component not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing component by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "components"
                ],
                "summary": "Update component",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Component ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated component data",
                        "name": "component",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UpdateComponentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated component",
                        "schema": {
                            "$ref": "#/definitions/service.ComponentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Component not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a component by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "components"
                ],
                "summary": "Delete component",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Component ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted component"
                    },
                    "400": {
                        "description": "Invalid component ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Component not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/github/contributions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns the total number of contributions made by the authenticated user. If no period specified, uses GitHub's default (last year based on user's timezone). Uses GitHub GraphQL API to fetch contribution data.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "github"
                ],
                "summary": "Get user total contributions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Time period in days (e.g., '30d', '90d', '365d'). If omitted, uses GitHub's default period. Maximum: 365 days",
                        "name": "period",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.TotalContributionsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid period parameter",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "GitHub API error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/github/pull-requests": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns all pull requests created by the authenticated user across all repositories they have access to",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "github"
                ],
                "summary": "Get my pull requests",
                "parameters": [
                    {
                        "type": "string",
                        "default": "open",
                        "description": "Filter by state: open, closed, all",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "created",
                        "description": "Sort by: created, updated, popularity, long-running",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "desc",
                        "description": "Sort direction: asc, desc",
                        "name": "direction",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 30,
                        "description": "Results per page (1-100)",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.PullRequestsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "GitHub API error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/groups": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all groups belonging to an organization with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "List groups by organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID (UUID)",
                        "name": "organization_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of items per page",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved groups",
                        "schema": {
                            "$ref": "#/definitions/service.GroupListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid organization ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new group within an organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Create a new group",
                "parameters": [
                    {
                        "description": "Group data",
                        "name": "group",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created group",
                        "schema": {
                            "$ref": "#/definitions/service.GroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/groups/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific group by its UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Get group by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved group",
                        "schema": {
                            "$ref": "#/definitions/service.GroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid group ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing group by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Update group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated group data",
                        "name": "group",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UpdateGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated group",
                        "schema": {
                            "$ref": "#/definitions/service.GroupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a group by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Delete group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted group"
                    },
                    "400": {
                        "description": "Invalid group ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Get the overall health status of the application including database connectivity",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "Application is healthy",
                        "schema": {
                            "$ref": "#/definitions/handlers.HealthResponse"
                        }
                    },
                    "503": {
                        "description": "Application is unhealthy",
                        "schema": {
                            "$ref": "#/definitions/handlers.HealthResponse"
                        }
                    }
                }
            }
        },
        "/health/live": {
            "get": {
                "description": "Check if the application is alive and responding",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Liveness check",
                "responses": {
                    "200": {
                        "description": "Application is alive",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/health/ready": {
            "get": {
                "description": "Check if the application is ready to serve requests",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Readiness check",
                "responses": {
                    "200": {
                        "description": "Application is ready",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "503": {
                        "description": "Application is not ready",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/jira/issues": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns Jira issues filtered by project, status, team, assignee, type, summary, and key using real Jira values with pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jira"
                ],
                "summary": "Get Jira issues for teams/projects",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Jira project key (e.g., SAPBTPCFS)",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Jira status values (e.g., 'Open,In Progress,Re Opened')",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Team name for filtering",
                        "name": "team",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Assignee username for filtering",
                        "name": "assignee",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Issue type (e.g., 'Bug,Task,Story')",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Free text search in summary",
                        "name": "summary",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Specific issue key (e.g., 'BUG-1234')",
                        "name": "key",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page (default: 50, max: 100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Issues",
                        "schema": {
                            "$ref": "#/definitions/service.JiraIssuesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid pagination parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "502": {
                        "description": "Jira request failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/jira/issues/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns Jira issues for the current authenticated user with optional filtering and pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jira"
                ],
                "summary": "Get my Jira issues",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Jira status values (e.g., 'Open,In Progress')",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Jira project key (e.g., SAPBTPCFS)",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page (default: 50, max: 100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Issues",
                        "schema": {
                            "$ref": "#/definitions/service.JiraIssuesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid pagination parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "502": {
                        "description": "Jira request failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/jira/issues/me/count": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns the count of Jira issues for the current authenticated user filtered by status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jira"
                ],
                "summary": "Get count of my Jira issues by status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Jira status value (e.g., 'Resolved')",
                        "name": "status",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Jira project key (e.g., SAPBTPCFS)",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Date in yyyy-MM-dd format for date filtering (default: one year ago for resolved issues)",
                        "name": "date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or invalid query parameter",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "502": {
                        "description": "Jira request failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/landscapes": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all landscapes in an organization with optional search and pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "landscapes"
                ],
                "summary": "List landscapes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID (UUID)",
                        "name": "organization_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Search term for landscape name or description",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of items per page",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved landscapes",
                        "schema": {
                            "$ref": "#/definitions/service.LandscapeListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new landscape within an organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "landscapes"
                ],
                "summary": "Create a new landscape",
                "parameters": [
                    {
                        "description": "Landscape data",
                        "name": "landscape",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateLandscapeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created landscape",
                        "schema": {
                            "$ref": "#/definitions/service.LandscapeResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Landscape already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/landscapes/environment/{environment}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get landscapes filtered by environment type (development, staging, production, testing, preview)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "landscapes"
                ],
                "summary": "Get landscapes by environment type",
                "parameters": [
                    {
                        "enum": [
                            "development",
                            "staging",
                            "production",
                            "testing",
                            "preview"
                        ],
                        "type": "string",
                        "description": "Environment type",
                        "name": "environment",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Organization ID (UUID)",
                        "name": "organization_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of items per page",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved landscapes",
                        "schema": {
                            "$ref": "#/definitions/service.LandscapeListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or environment type",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/landscapes/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific landscape by its UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "landscapes"
                ],
                "summary": "Get landscape by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Landscape ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved landscape",
                        "schema": {
                            "$ref": "#/definitions/service.LandscapeResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid landscape ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Landscape not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing landscape by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "landscapes"
                ],
                "summary": "Update landscape",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Landscape ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated landscape data",
                        "name": "landscape",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UpdateLandscapeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated landscape",
                        "schema": {
                            "$ref": "#/definitions/service.LandscapeResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Landscape not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a landscape by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "landscapes"
                ],
                "summary": "Delete landscape",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Landscape ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted landscape"
                    },
                    "400": {
                        "description": "Invalid landscape ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Landscape not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/landscapes/{id}/deployments": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a landscape including all its component deployments",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "landscapes"
                ],
                "summary": "Get landscape with its component deployments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Landscape ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved landscape with deployments",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid landscape ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Landscape not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/landscapes/{id}/details": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a landscape with all its related data (projects, deployments, etc.)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "landscapes"
                ],
                "summary": "Get landscape with full details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Landscape ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved landscape with full details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid landscape ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Landscape not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/landscapes/{id}/projects": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a landscape including all its associated projects",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "landscapes"
                ],
                "summary": "Get landscape with its projects",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Landscape ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved landscape with projects",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid landscape ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Landscape not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ldap/users/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Searches LDAP directory for users where cn starts with given prefix",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ldap"
                ],
                "summary": "Search LDAP users by CN prefix",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Common name prefix",
                        "name": "cn",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Missing or invalid query parameter",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "502": {
                        "description": "LDAP connection or search failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/members": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all members belonging to an organization with pagination. Can be accessed via /members?organization_id=xxx or /organizations/:id/members",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "members"
                ],
                "summary": "List members by organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID (UUID) - used when accessing via /members endpoint",
                        "name": "organization_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID (UUID) - used when accessing via /organizations/:id/members endpoint",
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Number of items to skip",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved members list",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid organization ID or parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new member in the system with optional default values.\n\nOptional Fields with Defaults:\n- role: Defaults to 'developer' (valid values: admin, developer, manager, viewer)\n- team_role: Defaults to 'member' (valid values: member, team_lead)\n- external_type: Defaults to 'internal'\n- is_active: Defaults to true",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "members"
                ],
                "summary": "Create a new member",
                "parameters": [
                    {
                        "description": "Member data",
                        "name": "member",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateMemberRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created member",
                        "schema": {
                            "$ref": "#/definitions/service.MemberResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/members/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific member by their UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "members"
                ],
                "summary": "Get member by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Member ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved member",
                        "schema": {
                            "$ref": "#/definitions/service.MemberResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid member ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Member not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing member by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "members"
                ],
                "summary": "Update member",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Member ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated member data",
                        "name": "member",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UpdateMemberRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated member",
                        "schema": {
                            "$ref": "#/definitions/service.MemberResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or member ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Member not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a member by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "members"
                ],
                "summary": "Delete member",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Member ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted member"
                    },
                    "400": {
                        "description": "Invalid member ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Member not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/members/{id}/quick-links": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all quick links from a member's metadata.quick_links array",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "members"
                ],
                "summary": "Get quick links for a member",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Member ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved quick links",
                        "schema": {
                            "$ref": "#/definitions/service.QuickLinksResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid member ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Member not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a new quick link to a member's metadata.quick_links array. Links support url, title, icon, and category fields.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "members"
                ],
                "summary": "Add a quick link to a member",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Member ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Quick link data",
                        "name": "link",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.AddQuickLinkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully added quick link",
                        "schema": {
                            "$ref": "#/definitions/service.MemberResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Member not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Link with URL already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a quick link from a member's metadata.quick_links array by URL",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "members"
                ],
                "summary": "Remove a quick link from a member",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Member ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Link URL to remove",
                        "name": "url",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully removed quick link",
                        "schema": {
                            "$ref": "#/definitions/service.MemberResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Member or link not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/organizations": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all organizations with pagination support",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "List all organizations",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of items per page",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved organizations",
                        "schema": {
                            "$ref": "#/definitions/service.OrganizationListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new organization with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Create a new organization",
                "parameters": [
                    {
                        "description": "Organization data",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateOrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created organization",
                        "schema": {
                            "$ref": "#/definitions/service.OrganizationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Organization already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/organizations/by-name/{name}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific organization by its name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Get organization by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved organization",
                        "schema": {
                            "$ref": "#/definitions/service.OrganizationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid organization name",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/organizations/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific organization by its UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Get organization by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved organization",
                        "schema": {
                            "$ref": "#/definitions/service.OrganizationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid organization ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing organization by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Update organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated organization data",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UpdateOrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated organization",
                        "schema": {
                            "$ref": "#/definitions/service.OrganizationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an organization by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Delete organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted organization"
                    },
                    "400": {
                        "description": "Invalid organization ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/projects": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new project within an organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Create a new project",
                "parameters": [
                    {
                        "description": "Project data",
                        "name": "project",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created project",
                        "schema": {
                            "$ref": "#/definitions/service.ProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Organization or team not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Project already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/projects/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific project by its UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get project by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved project",
                        "schema": {
                            "$ref": "#/definitions/service.ProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid project ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing project by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Update project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated project data",
                        "name": "project",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UpdateProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated project",
                        "schema": {
                            "$ref": "#/definitions/service.ProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Project or team not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a project by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Delete project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted project"
                    },
                    "400": {
                        "description": "Invalid project ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/self-service/jenkins/{jaasName}/{jobName}/parameters": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves available parameters for a Jenkins job from the specified JAAS instance. Returns only parameters from hudson.model.ParametersDefinitionProperty.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jenkins"
                ],
                "summary": "Get Jenkins job parameters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JAAS instance name (e.g., 'cfsmc')",
                        "name": "jaasName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Jenkins job name",
                        "name": "jobName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Filtered parameter definitions containing parameterDefinitions array with name, type, defaultParameterValue, choices, and description",
                        "schema": {
                            "$ref": "#/definitions/handlers.JenkinsParametersResponse"
                        }
                    },
                    "400": {
                        "description": "Missing path parameter",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "502": {
                        "description": "Jenkins request failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/self-service/jenkins/{jaasName}/{jobName}/trigger": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Triggers a Jenkins job on the specified JAAS instance with optional parameters. If no parameters are provided or body is empty, Jenkins will use the default values defined in the job configuration. You can override specific parameters while letting others use their defaults.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jenkins"
                ],
                "summary": "Trigger Jenkins job",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JAAS instance name (e.g., 'cfsmc')",
                        "name": "jaasName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Jenkins job name",
                        "name": "jobName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Optional job parameters as key-value pairs. Omitted parameters will use their default values from the job configuration.",
                        "name": "parameters",
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Job triggered successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.JenkinsTriggerResponse"
                        }
                    },
                    "400": {
                        "description": "Missing path parameter or invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "502": {
                        "description": "Jenkins trigger failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/sonar/measures": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Calls Sonar APIs to retrieve measures (coverage, vulnerabilities, code_smells) and quality gate status for the given component key, merges them and returns as JSON.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sonar"
                ],
                "summary": "Get Sonar measures and quality gate status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sonar project key",
                        "name": "component",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.SonarCombinedResponse"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid query parameter",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "502": {
                        "description": "Sonar request failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/teams": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all teams with optional organization filtering and pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teams"
                ],
                "summary": "List all teams",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID (UUID) to filter teams",
                        "name": "organization_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of items per page",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved teams",
                        "schema": {
                            "$ref": "#/definitions/service.TeamListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new team with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teams"
                ],
                "summary": "Create a new team",
                "parameters": [
                    {
                        "description": "Team data",
                        "name": "team",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateTeamRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created team",
                        "schema": {
                            "$ref": "#/definitions/service.TeamResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Organization or leader not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/teams/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific team by its UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teams"
                ],
                "summary": "Get team by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved team",
                        "schema": {
                            "$ref": "#/definitions/service.TeamResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid team ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Team not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing team by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teams"
                ],
                "summary": "Update team",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated team data",
                        "name": "team",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UpdateTeamRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated team",
                        "schema": {
                            "$ref": "#/definitions/service.TeamResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Team or leader not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a team by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teams"
                ],
                "summary": "Delete team",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted team"
                    },
                    "400": {
                        "description": "Invalid team ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Team not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/teams/{id}/components": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all components owned by a team identified by ID. This is a cleaner endpoint that uses team ID instead of name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teams"
                ],
                "summary": "Get components owned by team",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of items per page",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved team components",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Team not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/teams/{id}/links": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Replace all links for a team with the provided list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teams"
                ],
                "summary": "Update all links for a team",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Links data",
                        "name": "links",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UpdateLinksRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated links",
                        "schema": {
                            "$ref": "#/definitions/service.TeamResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Team not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a new link to a team's links array. Links support url, title, icon, and category fields.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teams"
                ],
                "summary": "Add a link to a team",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Link data",
                        "name": "link",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.AddLinkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully added link",
                        "schema": {
                            "$ref": "#/definitions/service.TeamResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Team not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Link with URL already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a link from a team's links array by URL",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teams"
                ],
                "summary": "Remove a link from a team",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Link URL to remove",
                        "name": "url",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully removed link",
                        "schema": {
                            "$ref": "#/definitions/service.TeamResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Team or link not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/teams/{id}/members": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all members of a specific team by team ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teams"
                ],
                "summary": "Get team members",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved team members",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.MemberResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid team ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Team not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.AuthClaims": {
            "type": "object",
            "properties": {
                "aud": {
                    "type": "string",
                    "example": "developer-portal"
                },
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "environment": {
                    "type": "string",
                    "example": "development"
                },
                "exp": {
                    "type": "integer",
                    "example": 1672531200
                },
                "iat": {
                    "type": "integer",
                    "example": 1672527600
                },
                "iss": {
                    "description": "Standard JWT fields",
                    "type": "string",
                    "example": "developer-portal-backend"
                },
                "provider": {
                    "type": "string",
                    "example": "githubtools"
                },
                "sub": {
                    "type": "string",
                    "example": "12345"
                },
                "user_id": {
                    "type": "integer",
                    "example": 12345
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "auth.AuthLogoutResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Logged out successfully"
                }
            }
        },
        "auth.AuthRefreshResponse": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "expiresInSeconds": {
                    "type": "integer",
                    "example": 3600
                },
                "profile": {
                    "$ref": "#/definitions/auth.UserProfile"
                },
                "scope": {
                    "type": "string",
                    "example": "user:email read:user"
                },
                "tokenType": {
                    "type": "string",
                    "example": "bearer"
                },
                "valid": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "auth.AuthValidateResponse": {
            "type": "object",
            "properties": {
                "claims": {
                    "$ref": "#/definitions/auth.AuthClaims"
                },
                "valid": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "auth.UserProfile": {
            "type": "object",
            "properties": {
                "avatarUrl": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "memberId": {
                    "description": "ID of member with matching email",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "error message"
                }
            }
        },
        "handlers.HealthResponse": {
            "type": "object",
            "properties": {
                "services": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "handlers.JenkinsDefaultParameterValue": {
            "type": "object",
            "properties": {
                "_class": {
                    "type": "string",
                    "example": "hudson.model.StringParameterValue"
                },
                "value": {
                    "type": "string",
                    "example": "main"
                }
            }
        },
        "handlers.JenkinsParameterDefinition": {
            "type": "object",
            "properties": {
                "_class": {
                    "type": "string",
                    "example": "hudson.model.StringParameterDefinition"
                },
                "choices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "dev",
                        "staging",
                        "production"
                    ]
                },
                "defaultParameterValue": {
                    "$ref": "#/definitions/handlers.JenkinsDefaultParameterValue"
                },
                "description": {
                    "type": "string",
                    "example": "Branch to deploy"
                },
                "name": {
                    "type": "string",
                    "example": "BRANCH"
                },
                "type": {
                    "type": "string",
                    "example": "StringParameterDefinition"
                }
            }
        },
        "handlers.JenkinsParametersResponse": {
            "type": "object",
            "properties": {
                "parameterDefinitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.JenkinsParameterDefinition"
                    }
                }
            }
        },
        "handlers.JenkinsTriggerResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "job triggered successfully"
                }
            }
        },
        "models.ComponentStatus": {
            "type": "string",
            "enum": [
                "active",
                "inactive",
                "deprecated",
                "maintenance"
            ],
            "x-enum-varnames": [
                "ComponentStatusActive",
                "ComponentStatusInactive",
                "ComponentStatusDeprecated",
                "ComponentStatusMaintenance"
            ]
        },
        "models.ComponentType": {
            "type": "string",
            "enum": [
                "service",
                "library",
                "application",
                "database",
                "api"
            ],
            "x-enum-varnames": [
                "ComponentTypeService",
                "ComponentTypeLibrary",
                "ComponentTypeApplication",
                "ComponentTypeDatabase",
                "ComponentTypeAPI"
            ]
        },
        "models.DeploymentStatus": {
            "type": "string",
            "enum": [
                "healthy",
                "degraded",
                "unhealthy",
                "unknown"
            ],
            "x-enum-varnames": [
                "DeploymentStatusHealthy",
                "DeploymentStatusDegraded",
                "DeploymentStatusUnhealthy",
                "DeploymentStatusUnknown"
            ]
        },
        "models.LandscapeStatus": {
            "type": "string",
            "enum": [
                "active",
                "inactive",
                "maintenance",
                "retired"
            ],
            "x-enum-varnames": [
                "LandscapeStatusActive",
                "LandscapeStatusInactive",
                "LandscapeStatusMaintenance",
                "LandscapeStatusRetired"
            ]
        },
        "models.LandscapeType": {
            "type": "string",
            "enum": [
                "development",
                "staging",
                "production",
                "testing",
                "preview"
            ],
            "x-enum-varnames": [
                "LandscapeTypeDevelopment",
                "LandscapeTypeStaging",
                "LandscapeTypeProduction",
                "LandscapeTypeTesting",
                "LandscapeTypePreview"
            ]
        },
        "models.ProjectStatus": {
            "type": "string",
            "enum": [
                "active",
                "inactive",
                "archived"
            ],
            "x-enum-varnames": [
                "ProjectStatusActive",
                "ProjectStatusInactive",
                "ProjectStatusArchived"
            ]
        },
        "models.ProjectType": {
            "type": "string",
            "enum": [
                "application",
                "service",
                "library",
                "platform"
            ],
            "x-enum-varnames": [
                "ProjectTypeApplication",
                "ProjectTypeService",
                "ProjectTypeLibrary",
                "ProjectTypePlatform"
            ]
        },
        "models.TeamStatus": {
            "type": "string",
            "enum": [
                "active",
                "inactive",
                "archived"
            ],
            "x-enum-varnames": [
                "TeamStatusActive",
                "TeamStatusInactive",
                "TeamStatusArchived"
            ]
        },
        "service.AICoreConfigurationRequest": {
            "type": "object",
            "required": [
                "executableId",
                "name",
                "scenarioId"
            ],
            "properties": {
                "executableId": {
                    "type": "string"
                },
                "inputArtifactBindings": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "name": {
                    "type": "string"
                },
                "parameterBindings": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "scenarioId": {
                    "type": "string"
                }
            }
        },
        "service.AICoreConfigurationResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "service.AICoreDeployment": {
            "type": "object",
            "properties": {
                "configurationId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deploymentUrl": {
                    "type": "string"
                },
                "details": {
                    "type": "object",
                    "additionalProperties": true
                },
                "id": {
                    "type": "string"
                },
                "modifiedAt": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "statusMessage": {
                    "type": "string"
                }
            }
        },
        "service.AICoreDeploymentDeletionResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "service.AICoreDeploymentDetailsResponse": {
            "type": "object",
            "properties": {
                "completionTime": {
                    "type": "string"
                },
                "configurationId": {
                    "type": "string"
                },
                "configurationName": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deploymentUrl": {
                    "type": "string"
                },
                "details": {
                    "type": "object",
                    "additionalProperties": true
                },
                "executableId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastOperation": {
                    "type": "string"
                },
                "latestRunningConfigurationId": {
                    "type": "string"
                },
                "modifiedAt": {
                    "type": "string"
                },
                "scenarioId": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "statusDetails": {
                    "type": "object",
                    "additionalProperties": true
                },
                "statusMessage": {
                    "type": "string"
                },
                "submissionTime": {
                    "type": "string"
                },
                "targetStatus": {
                    "type": "string"
                },
                "ttl": {
                    "type": "string"
                }
            }
        },
        "service.AICoreDeploymentModificationRequest": {
            "type": "object",
            "properties": {
                "configurationId": {
                    "type": "string"
                },
                "targetStatus": {
                    "type": "string"
                }
            }
        },
        "service.AICoreDeploymentModificationResponse": {
            "type": "object",
            "properties": {
                "deploymentUrl": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "targetStatus": {
                    "type": "string"
                }
            }
        },
        "service.AICoreDeploymentRequest": {
            "type": "object",
            "required": [
                "configurationId"
            ],
            "properties": {
                "configurationId": {
                    "type": "string"
                },
                "ttl": {
                    "type": "string"
                }
            }
        },
        "service.AICoreDeploymentResponse": {
            "type": "object",
            "properties": {
                "deploymentUrl": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "ttl": {
                    "type": "string"
                }
            }
        },
        "service.AICoreDeploymentsResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "deployments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.AICoreTeamDeployments"
                    }
                }
            }
        },
        "service.AICoreModel": {
            "type": "object",
            "properties": {
                "accessType": {
                    "type": "string"
                },
                "allowedScenarios": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": true
                    }
                },
                "description": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "executableId": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "versions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.AICoreModelVersion"
                    }
                }
            }
        },
        "service.AICoreModelVersion": {
            "type": "object",
            "properties": {
                "capabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "contextLength": {
                    "type": "integer"
                },
                "cost": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": true
                    }
                },
                "deprecated": {
                    "type": "boolean"
                },
                "inputTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isLatest": {
                    "type": "boolean"
                },
                "metadata": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": true
                    }
                },
                "name": {
                    "type": "string"
                },
                "orchestrationCapabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "retirementDate": {
                    "type": "string"
                },
                "streamingSupported": {
                    "type": "boolean"
                },
                "suggestedReplacements": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "service.AICoreModelsResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.AICoreModel"
                    }
                }
            }
        },
        "service.AICoreTeamDeployments": {
            "type": "object",
            "properties": {
                "deployments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.AICoreDeployment"
                    }
                },
                "team": {
                    "type": "string"
                }
            }
        },
        "service.AddLinkRequest": {
            "type": "object",
            "required": [
                "title",
                "url"
            ],
            "properties": {
                "category": {
                    "type": "string"
                },
                "icon": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "service.AddQuickLinkRequest": {
            "type": "object",
            "required": [
                "title",
                "url"
            ],
            "properties": {
                "category": {
                    "type": "string"
                },
                "icon": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "service.ComponentDeploymentListResponse": {
            "type": "object",
            "properties": {
                "deployments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.ComponentDeploymentResponse"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "service.ComponentDeploymentResponse": {
            "type": "object",
            "properties": {
                "build_properties": {
                    "type": "object"
                },
                "build_time": {
                    "type": "string"
                },
                "component_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deployed_at": {
                    "type": "string"
                },
                "git_commit_id": {
                    "type": "string"
                },
                "git_commit_time": {
                    "type": "string"
                },
                "git_properties": {
                    "type": "object"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "landscape_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "service.ComponentListResponse": {
            "type": "object",
            "properties": {
                "components": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.ComponentResponse"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "service.ComponentResponse": {
            "type": "object",
            "properties": {
                "artifact_name": {
                    "type": "string"
                },
                "component_type": {
                    "$ref": "#/definitions/models.ComponentType"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "documentation_url": {
                    "type": "string"
                },
                "git_repository_url": {
                    "type": "string"
                },
                "group_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "links": {
                    "type": "object"
                },
                "metadata": {
                    "type": "object"
                },
                "name": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.ComponentStatus"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "service.CreateComponentDeploymentRequest": {
            "type": "object",
            "required": [
                "component_id",
                "landscape_id"
            ],
            "properties": {
                "build_properties": {
                    "type": "object"
                },
                "build_time": {
                    "type": "string"
                },
                "component_id": {
                    "type": "string"
                },
                "deployed_at": {
                    "type": "string"
                },
                "git_commit_id": {
                    "type": "string"
                },
                "git_commit_time": {
                    "type": "string"
                },
                "git_properties": {
                    "type": "object"
                },
                "is_active": {
                    "type": "boolean"
                },
                "landscape_id": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "service.CreateComponentRequest": {
            "type": "object",
            "required": [
                "display_name",
                "name",
                "organization_id"
            ],
            "properties": {
                "artifact_name": {
                    "type": "string"
                },
                "component_type": {
                    "$ref": "#/definitions/models.ComponentType"
                },
                "description": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string",
                    "maxLength": 250
                },
                "documentation_url": {
                    "type": "string"
                },
                "git_repository_url": {
                    "type": "string"
                },
                "group_name": {
                    "type": "string"
                },
                "links": {
                    "type": "object"
                },
                "metadata": {
                    "type": "object"
                },
                "name": {
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                },
                "organization_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.ComponentStatus"
                }
            }
        },
        "service.CreateGroupRequest": {
            "type": "object",
            "required": [
                "display_name",
                "name",
                "organization_id"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string",
                    "maxLength": 200
                },
                "metadata": {
                    "type": "object"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "organization_id": {
                    "type": "string"
                }
            }
        },
        "service.CreateLandscapeRequest": {
            "type": "object",
            "required": [
                "display_name",
                "name",
                "organization_id"
            ],
            "properties": {
                "aws_account_id": {
                    "type": "string"
                },
                "cam_profile_url": {
                    "type": "string"
                },
                "deployment_status": {
                    "$ref": "#/definitions/models.DeploymentStatus"
                },
                "description": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string",
                    "maxLength": 250
                },
                "environment_group": {
                    "type": "string"
                },
                "github_config_url": {
                    "type": "string"
                },
                "landscape_type": {
                    "$ref": "#/definitions/models.LandscapeType"
                },
                "metadata": {
                    "type": "object"
                },
                "name": {
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                },
                "organization_id": {
                    "type": "string"
                },
                "sort_order": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/models.LandscapeStatus"
                }
            }
        },
        "service.CreateMemberRequest": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "full_name",
                "iuser",
                "last_name",
                "organization_id"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 255
                },
                "external_type": {
                    "description": "Optional: defaults to \"internal\" if not provided",
                    "type": "string",
                    "default": "internal",
                    "example": "internal"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 100
                },
                "full_name": {
                    "type": "string",
                    "maxLength": 200
                },
                "is_active": {
                    "description": "Optional: defaults to true if not provided",
                    "type": "boolean",
                    "default": true,
                    "example": true
                },
                "iuser": {
                    "type": "string",
                    "maxLength": 50
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 100
                },
                "metadata": {
                    "type": "object"
                },
                "organization_id": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string",
                    "maxLength": 20
                },
                "role": {
                    "description": "Optional: defaults to \"developer\" if not provided. Valid values: admin, developer, manager, viewer",
                    "type": "string",
                    "default": "developer",
                    "example": "developer"
                },
                "team_id": {
                    "type": "string"
                },
                "team_role": {
                    "description": "Optional: defaults to \"member\" if not provided. Valid values: member, team_lead",
                    "type": "string",
                    "default": "member",
                    "example": "member"
                }
            }
        },
        "service.CreateOrganizationRequest": {
            "type": "object",
            "required": [
                "display_name",
                "domain",
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string",
                    "maxLength": 200
                },
                "domain": {
                    "type": "string",
                    "maxLength": 100
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                }
            }
        },
        "service.CreateProjectRequest": {
            "type": "object",
            "required": [
                "display_name",
                "name",
                "organization_id"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string",
                    "maxLength": 250
                },
                "metadata": {
                    "type": "object"
                },
                "name": {
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                },
                "organization_id": {
                    "type": "string"
                },
                "project_type": {
                    "$ref": "#/definitions/models.ProjectType"
                },
                "sort_order": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/models.ProjectStatus"
                }
            }
        },
        "service.CreateTeamRequest": {
            "type": "object",
            "required": [
                "display_name",
                "group_id",
                "name",
                "status"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string",
                    "maxLength": 200
                },
                "group_id": {
                    "type": "string"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.Link"
                    }
                },
                "metadata": {
                    "type": "object"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "status": {
                    "enum": [
                        "active",
                        "inactive",
                        "archived"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TeamStatus"
                        }
                    ]
                },
                "team_lead_id": {
                    "type": "string"
                }
            }
        },
        "service.GitHubUser": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string",
                    "example": "https://avatars.githubusercontent.com/u/12345"
                },
                "id": {
                    "type": "integer",
                    "example": 12345
                },
                "login": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "service.GroupListResponse": {
            "type": "object",
            "properties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.GroupResponse"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "service.GroupResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object"
                },
                "name": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "service.JiraComponent": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "service.JiraIssue": {
            "type": "object",
            "properties": {
                "fields": {
                    "$ref": "#/definitions/service.JiraIssueFields"
                },
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "link": {
                    "type": "string"
                },
                "project": {
                    "type": "string"
                }
            }
        },
        "service.JiraIssueFields": {
            "type": "object",
            "properties": {
                "assignee": {
                    "$ref": "#/definitions/service.JiraUser"
                },
                "components": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.JiraComponent"
                    }
                },
                "created": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "issuetype": {
                    "$ref": "#/definitions/service.JiraIssueType"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "priority": {
                    "$ref": "#/definitions/service.JiraPriority"
                },
                "reporter": {
                    "$ref": "#/definitions/service.JiraUser"
                },
                "status": {
                    "$ref": "#/definitions/service.JiraStatus"
                },
                "summary": {
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                }
            }
        },
        "service.JiraIssueType": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "service.JiraIssuesResponse": {
            "type": "object",
            "properties": {
                "issues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.JiraIssue"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "service.JiraPriority": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "service.JiraStatus": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "service.JiraUser": {
            "type": "object",
            "properties": {
                "accountId": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "emailAddress": {
                    "type": "string"
                }
            }
        },
        "service.LandscapeListResponse": {
            "type": "object",
            "properties": {
                "landscapes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.LandscapeResponse"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "service.LandscapeResponse": {
            "type": "object",
            "properties": {
                "aws_account_id": {
                    "type": "string"
                },
                "cam_profile_url": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deployment_status": {
                    "$ref": "#/definitions/models.DeploymentStatus"
                },
                "description": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "environment_group": {
                    "type": "string"
                },
                "github_config_url": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "landscape_type": {
                    "$ref": "#/definitions/models.LandscapeType"
                },
                "metadata": {
                    "type": "object"
                },
                "name": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "sort_order": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/models.LandscapeStatus"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "service.Link": {
            "type": "object",
            "required": [
                "title",
                "url"
            ],
            "properties": {
                "category": {
                    "type": "string"
                },
                "icon": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "service.MemberResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "external_type": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "iuser": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object"
                },
                "organization_id": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "team_id": {
                    "type": "string"
                },
                "team_role": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "service.OrganizationListResponse": {
            "type": "object",
            "properties": {
                "organizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.OrganizationResponse"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "service.OrganizationResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "service.ProjectResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object"
                },
                "name": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "project_type": {
                    "$ref": "#/definitions/models.ProjectType"
                },
                "sort_order": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/models.ProjectStatus"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "service.PullRequest": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2025-01-01T12:00:00Z"
                },
                "draft": {
                    "type": "boolean",
                    "example": false
                },
                "html_url": {
                    "type": "string",
                    "example": "https://github.com/owner/repo/pull/42"
                },
                "id": {
                    "type": "integer",
                    "example": 1234567890
                },
                "number": {
                    "type": "integer",
                    "example": 42
                },
                "repository": {
                    "$ref": "#/definitions/service.Repository"
                },
                "state": {
                    "type": "string",
                    "example": "open"
                },
                "title": {
                    "type": "string",
                    "example": "Add new feature"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-01-02T12:00:00Z"
                },
                "user": {
                    "$ref": "#/definitions/service.GitHubUser"
                }
            }
        },
        "service.PullRequestsResponse": {
            "type": "object",
            "properties": {
                "pull_requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.PullRequest"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "service.QuickLink": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "icon": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "service.QuickLinksResponse": {
            "type": "object",
            "properties": {
                "quick_links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.QuickLink"
                    }
                }
            }
        },
        "service.Repository": {
            "type": "object",
            "properties": {
                "full_name": {
                    "type": "string",
                    "example": "owner/my-repo"
                },
                "name": {
                    "type": "string",
                    "example": "my-repo"
                },
                "owner": {
                    "type": "string",
                    "example": "owner"
                },
                "private": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "service.SonarCombinedResponse": {
            "type": "object",
            "properties": {
                "measures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.SonarMeasure"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "service.SonarMeasure": {
            "type": "object",
            "properties": {
                "bestValue": {
                    "type": "boolean"
                },
                "metric": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "service.TeamListResponse": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.TeamResponse"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "service.TeamResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "group_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.Link"
                    }
                },
                "metadata": {
                    "type": "object"
                },
                "name": {
                    "type": "string"
                },
                "organization_id": {
                    "description": "Include org ID for backwards compatibility",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.TeamStatus"
                },
                "team_lead_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "service.TotalContributionsResponse": {
            "type": "object",
            "properties": {
                "from": {
                    "type": "string",
                    "example": "2024-10-16T00:00:00Z"
                },
                "period": {
                    "type": "string",
                    "example": "365d"
                },
                "to": {
                    "type": "string",
                    "example": "2025-10-16T23:59:59Z"
                },
                "total_contributions": {
                    "type": "integer",
                    "example": 1234
                }
            }
        },
        "service.UpdateComponentDeploymentRequest": {
            "type": "object",
            "properties": {
                "build_properties": {
                    "type": "object"
                },
                "build_time": {
                    "type": "string"
                },
                "deployed_at": {
                    "type": "string"
                },
                "git_commit_id": {
                    "type": "string"
                },
                "git_commit_time": {
                    "type": "string"
                },
                "git_properties": {
                    "type": "object"
                },
                "is_active": {
                    "type": "boolean"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "service.UpdateComponentRequest": {
            "type": "object",
            "required": [
                "display_name"
            ],
            "properties": {
                "artifact_name": {
                    "type": "string"
                },
                "component_type": {
                    "$ref": "#/definitions/models.ComponentType"
                },
                "description": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string",
                    "maxLength": 250
                },
                "documentation_url": {
                    "type": "string"
                },
                "git_repository_url": {
                    "type": "string"
                },
                "group_name": {
                    "type": "string"
                },
                "links": {
                    "type": "object"
                },
                "metadata": {
                    "type": "object"
                },
                "status": {
                    "$ref": "#/definitions/models.ComponentStatus"
                }
            }
        },
        "service.UpdateGroupRequest": {
            "type": "object",
            "required": [
                "display_name",
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string",
                    "maxLength": 200
                },
                "metadata": {
                    "type": "object"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                }
            }
        },
        "service.UpdateLandscapeRequest": {
            "type": "object",
            "required": [
                "display_name"
            ],
            "properties": {
                "aws_account_id": {
                    "type": "string"
                },
                "cam_profile_url": {
                    "type": "string"
                },
                "deployment_status": {
                    "$ref": "#/definitions/models.DeploymentStatus"
                },
                "description": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string",
                    "maxLength": 250
                },
                "environment_group": {
                    "type": "string"
                },
                "github_config_url": {
                    "type": "string"
                },
                "landscape_type": {
                    "$ref": "#/definitions/models.LandscapeType"
                },
                "metadata": {
                    "type": "object"
                },
                "sort_order": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/models.LandscapeStatus"
                }
            }
        },
        "service.UpdateLinksRequest": {
            "type": "object",
            "required": [
                "links"
            ],
            "properties": {
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.Link"
                    }
                }
            }
        },
        "service.UpdateMemberRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 255
                },
                "external_type": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 100
                },
                "full_name": {
                    "type": "string",
                    "maxLength": 200
                },
                "is_active": {
                    "type": "boolean"
                },
                "iuser": {
                    "type": "string",
                    "maxLength": 50
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 100
                },
                "metadata": {
                    "type": "object"
                },
                "phone_number": {
                    "type": "string",
                    "maxLength": 20
                },
                "role": {
                    "type": "string"
                },
                "team_id": {
                    "type": "string"
                },
                "team_role": {
                    "type": "string"
                }
            }
        },
        "service.UpdateOrganizationRequest": {
            "type": "object",
            "required": [
                "display_name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string",
                    "maxLength": 200
                }
            }
        },
        "service.UpdateProjectRequest": {
            "type": "object",
            "required": [
                "display_name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string",
                    "maxLength": 250
                },
                "metadata": {
                    "type": "object"
                },
                "project_type": {
                    "$ref": "#/definitions/models.ProjectType"
                },
                "sort_order": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/models.ProjectStatus"
                }
            }
        },
        "service.UpdateTeamRequest": {
            "type": "object",
            "required": [
                "display_name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string",
                    "maxLength": 200
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.Link"
                    }
                },
                "metadata": {
                    "type": "object"
                },
                "status": {
                    "$ref": "#/definitions/models.TeamStatus"
                },
                "team_lead_id": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:7008",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Developer Portal Backend API",
	Description:      "This is the backend API for the Developer Portal, providing endpoints for managing organizations, teams, projects, components, and deployments.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
